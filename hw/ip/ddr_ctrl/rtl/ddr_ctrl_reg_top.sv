// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Top module auto-generated by `reggen`

`include "prim_assert.sv"

module ddr_ctrl_reg_top (
  input clk_i,
  input rst_ni,

  // Below Regster interface can be changed
  input  tlul_pkg::tl_h2d_t tl_i,
  output tlul_pkg::tl_d2h_t tl_o,
  // To HW
  output ddr_ctrl_reg_pkg::ddr_ctrl_reg2hw_t reg2hw, // Write
  input  ddr_ctrl_reg_pkg::ddr_ctrl_hw2reg_t hw2reg, // Read

  // Config
  input devmode_i // If 1, explicit error return for unmapped register access
);

  import ddr_ctrl_reg_pkg::* ;

  localparam int AW = 5;
  localparam int DW = 32;
  localparam int DBW = DW/8;                    // Byte Width

  // register signals
  logic           reg_we;
  logic           reg_re;
  logic [AW-1:0]  reg_addr;
  logic [DW-1:0]  reg_wdata;
  logic [DBW-1:0] reg_be;
  logic [DW-1:0]  reg_rdata;
  logic           reg_error;

  logic          addrmiss, wr_err;

  logic [DW-1:0] reg_rdata_next;

  tlul_pkg::tl_h2d_t tl_reg_h2d;
  tlul_pkg::tl_d2h_t tl_reg_d2h;

  assign tl_reg_h2d = tl_i;
  assign tl_o       = tl_reg_d2h;

  tlul_adapter_reg #(
    .RegAw(AW),
    .RegDw(DW)
  ) u_reg_if (
    .clk_i,
    .rst_ni,

    .tl_i (tl_reg_h2d),
    .tl_o (tl_reg_d2h),

    .we_o    (reg_we),
    .re_o    (reg_re),
    .addr_o  (reg_addr),
    .wdata_o (reg_wdata),
    .be_o    (reg_be),
    .rdata_i (reg_rdata),
    .error_i (reg_error)
  );

  assign reg_rdata = reg_rdata_next ;
  assign reg_error = (devmode_i & addrmiss) | wr_err ;

  // Define SW related signals
  // Format: <reg>_<field>_{wd|we|qs}
  //        or <reg>_{wd|we|qs} if field == 1 or 0
  logic init_calib_complete_qs;
  logic [31:0] ddrs_mosi_u_wd;
  logic ddrs_mosi_u_we;
  logic [31:0] ddrs_mosi_l_wd;
  logic ddrs_mosi_l_we;
  logic ddrs_mosi_valid_wd;
  logic ddrs_mosi_valid_we;
  logic [31:0] ddrs_miso_u_qs;
  logic [31:0] ddrs_miso_l_qs;
  logic ddrs_miso_valid_qs;
  logic ddrs_miso_valid_wd;
  logic ddrs_miso_valid_we;

  // Register instances
  // R[init_calib_complete]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RO"),
    .RESVAL  (1'h0)
  ) u_init_calib_complete (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.init_calib_complete.de),
    .d      (hw2reg.init_calib_complete.d ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (init_calib_complete_qs)
  );


  // R[ddrs_mosi_u]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_ddrs_mosi_u (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ddrs_mosi_u_we),
    .wd     (ddrs_mosi_u_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ddrs_mosi_u.q ),

    .qs     ()
  );


  // R[ddrs_mosi_l]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_ddrs_mosi_l (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ddrs_mosi_l_we),
    .wd     (ddrs_mosi_l_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ddrs_mosi_l.q ),

    .qs     ()
  );


  // R[ddrs_mosi_valid]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_ddrs_mosi_valid (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ddrs_mosi_valid_we),
    .wd     (ddrs_mosi_valid_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (reg2hw.ddrs_mosi_valid.qe),
    .q      (reg2hw.ddrs_mosi_valid.q ),

    .qs     ()
  );


  // R[ddrs_miso_u]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RO"),
    .RESVAL  (32'h0)
  ) u_ddrs_miso_u (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.ddrs_miso_u.de),
    .d      (hw2reg.ddrs_miso_u.d ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (ddrs_miso_u_qs)
  );


  // R[ddrs_miso_l]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RO"),
    .RESVAL  (32'h0)
  ) u_ddrs_miso_l (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.ddrs_miso_l.de),
    .d      (hw2reg.ddrs_miso_l.d ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (ddrs_miso_l_qs)
  );


  // R[ddrs_miso_valid]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_ddrs_miso_valid (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ddrs_miso_valid_we),
    .wd     (ddrs_miso_valid_wd),

    // from internal hardware
    .de     (hw2reg.ddrs_miso_valid.de),
    .d      (hw2reg.ddrs_miso_valid.d ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (ddrs_miso_valid_qs)
  );




  logic [6:0] addr_hit;
  always_comb begin
    addr_hit = '0;
    addr_hit[0] = (reg_addr == DDR_CTRL_INIT_CALIB_COMPLETE_OFFSET);
    addr_hit[1] = (reg_addr == DDR_CTRL_DDRS_MOSI_U_OFFSET);
    addr_hit[2] = (reg_addr == DDR_CTRL_DDRS_MOSI_L_OFFSET);
    addr_hit[3] = (reg_addr == DDR_CTRL_DDRS_MOSI_VALID_OFFSET);
    addr_hit[4] = (reg_addr == DDR_CTRL_DDRS_MISO_U_OFFSET);
    addr_hit[5] = (reg_addr == DDR_CTRL_DDRS_MISO_L_OFFSET);
    addr_hit[6] = (reg_addr == DDR_CTRL_DDRS_MISO_VALID_OFFSET);
  end

  assign addrmiss = (reg_re || reg_we) ? ~|addr_hit : 1'b0 ;

  // Check sub-word write is permitted
  always_comb begin
    wr_err = 1'b0;
    if (addr_hit[0] && reg_we && (DDR_CTRL_PERMIT[0] != (DDR_CTRL_PERMIT[0] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[1] && reg_we && (DDR_CTRL_PERMIT[1] != (DDR_CTRL_PERMIT[1] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[2] && reg_we && (DDR_CTRL_PERMIT[2] != (DDR_CTRL_PERMIT[2] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[3] && reg_we && (DDR_CTRL_PERMIT[3] != (DDR_CTRL_PERMIT[3] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[4] && reg_we && (DDR_CTRL_PERMIT[4] != (DDR_CTRL_PERMIT[4] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[5] && reg_we && (DDR_CTRL_PERMIT[5] != (DDR_CTRL_PERMIT[5] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[6] && reg_we && (DDR_CTRL_PERMIT[6] != (DDR_CTRL_PERMIT[6] & reg_be))) wr_err = 1'b1 ;
  end


  assign ddrs_mosi_u_we = addr_hit[1] & reg_we & ~wr_err;
  assign ddrs_mosi_u_wd = reg_wdata[31:0];

  assign ddrs_mosi_l_we = addr_hit[2] & reg_we & ~wr_err;
  assign ddrs_mosi_l_wd = reg_wdata[31:0];

  assign ddrs_mosi_valid_we = addr_hit[3] & reg_we & ~wr_err;
  assign ddrs_mosi_valid_wd = reg_wdata[0];



  assign ddrs_miso_valid_we = addr_hit[6] & reg_we & ~wr_err;
  assign ddrs_miso_valid_wd = reg_wdata[0];

  // Read data return
  always_comb begin
    reg_rdata_next = '0;
    unique case (1'b1)
      addr_hit[0]: begin
        reg_rdata_next[0] = init_calib_complete_qs;
      end

      addr_hit[1]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[2]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[3]: begin
        reg_rdata_next[0] = '0;
      end

      addr_hit[4]: begin
        reg_rdata_next[31:0] = ddrs_miso_u_qs;
      end

      addr_hit[5]: begin
        reg_rdata_next[31:0] = ddrs_miso_l_qs;
      end

      addr_hit[6]: begin
        reg_rdata_next[0] = ddrs_miso_valid_qs;
      end

      default: begin
        reg_rdata_next = '1;
      end
    endcase
  end

  // Assertions for Register Interface
  `ASSERT_PULSE(wePulse, reg_we)
  `ASSERT_PULSE(rePulse, reg_re)

  `ASSERT(reAfterRv, $rose(reg_re || reg_we) |=> tl_o.d_valid)

  `ASSERT(en2addrHit, (reg_we || reg_re) |-> $onehot0(addr_hit))

  // this is formulated as an assumption such that the FPV testbenches do disprove this
  // property by mistake
  `ASSUME(reqParity, tl_reg_h2d.a_valid |-> tl_reg_h2d.a_user.parity_en == 1'b0)

endmodule
