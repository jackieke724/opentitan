// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Top module auto-generated by `reggen`

`include "prim_assert.sv"

module dla_reg_top (
  input clk_i,
  input rst_ni,

  // Below Regster interface can be changed
  input  tlul_pkg::tl_h2d_t tl_i,
  output tlul_pkg::tl_d2h_t tl_o,

  // Output port for window
  output tlul_pkg::tl_h2d_t tl_win_o  [1],
  input  tlul_pkg::tl_d2h_t tl_win_i  [1],

  // To HW
  output dla_reg_pkg::dla_reg2hw_t reg2hw, // Write
  input  dla_reg_pkg::dla_hw2reg_t hw2reg, // Read

  // Config
  input devmode_i // If 1, explicit error return for unmapped register access
);

  import dla_reg_pkg::* ;

  localparam int AW = 16;
  localparam int DW = 32;
  localparam int DBW = DW/8;                    // Byte Width

  // register signals
  logic           reg_we;
  logic           reg_re;
  logic [AW-1:0]  reg_addr;
  logic [DW-1:0]  reg_wdata;
  logic [DBW-1:0] reg_be;
  logic [DW-1:0]  reg_rdata;
  logic           reg_error;

  logic          addrmiss, wr_err;

  logic [DW-1:0] reg_rdata_next;

  tlul_pkg::tl_h2d_t tl_reg_h2d;
  tlul_pkg::tl_d2h_t tl_reg_d2h;

  tlul_pkg::tl_h2d_t tl_socket_h2d [2];
  tlul_pkg::tl_d2h_t tl_socket_d2h [2];

  logic [1:0] reg_steer;

  // socket_1n connection
  assign tl_reg_h2d = tl_socket_h2d[1];
  assign tl_socket_d2h[1] = tl_reg_d2h;

  assign tl_win_o[0] = tl_socket_h2d[0];
  assign tl_socket_d2h[0] = tl_win_i[0];

  // Create Socket_1n
  tlul_socket_1n #(
    .N          (2),
    .HReqPass   (1'b1),
    .HRspPass   (1'b1),
    .DReqPass   ({2{1'b1}}),
    .DRspPass   ({2{1'b1}}),
    .HReqDepth  (4'h0),
    .HRspDepth  (4'h0),
    .DReqDepth  ({2{4'h0}}),
    .DRspDepth  ({2{4'h0}})
  ) u_socket (
    .clk_i,
    .rst_ni,
    .tl_h_i (tl_i),
    .tl_h_o (tl_o),
    .tl_d_o (tl_socket_h2d),
    .tl_d_i (tl_socket_d2h),
    .dev_select_i (reg_steer)
  );

  // Create steering logic
  always_comb begin
    reg_steer = 1;       // Default set to register

    // TODO: Can below codes be unique case () inside ?
    if (tl_i.a_address[AW-1:0] >= 32768 && tl_i.a_address[AW-1:0] < 36864) begin
      reg_steer = 0;
    end
  end

  tlul_adapter_reg #(
    .RegAw(AW),
    .RegDw(DW)
  ) u_reg_if (
    .clk_i,
    .rst_ni,

    .tl_i (tl_reg_h2d),
    .tl_o (tl_reg_d2h),

    .we_o    (reg_we),
    .re_o    (reg_re),
    .addr_o  (reg_addr),
    .wdata_o (reg_wdata),
    .be_o    (reg_be),
    .rdata_i (reg_rdata),
    .error_i (reg_error)
  );

  assign reg_rdata = reg_rdata_next ;
  assign reg_error = (devmode_i & addrmiss) | wr_err ;

  // Define SW related signals
  // Format: <reg>_<field>_{wd|we|qs}
  //        or <reg>_{wd|we|qs} if field == 1 or 0
  logic intr_state_qs;
  logic intr_state_wd;
  logic intr_state_we;
  logic intr_enable_qs;
  logic intr_enable_wd;
  logic intr_enable_we;
  logic intr_test_wd;
  logic intr_test_we;
  logic gst_status_ddr2gb_qs;
  logic gst_status_gb2lb_qs;
  logic gst_status_conv_qs;
  logic gst_status_fc_qs;
  logic gst_status_ppe_qs;
  logic gst_intr_ddr2gb_qs;
  logic gst_intr_ddr2gb_wd;
  logic gst_intr_ddr2gb_we;
  logic gst_intr_gb2lb_qs;
  logic gst_intr_gb2lb_wd;
  logic gst_intr_gb2lb_we;
  logic gst_intr_conv_qs;
  logic gst_intr_conv_wd;
  logic gst_intr_conv_we;
  logic gst_intr_fc_qs;
  logic gst_intr_fc_wd;
  logic gst_intr_fc_we;
  logic gst_intr_ppe_qs;
  logic gst_intr_ppe_wd;
  logic gst_intr_ppe_we;
  logic [15:0] gst_enable_row_qs;
  logic [15:0] gst_enable_row_wd;
  logic gst_enable_row_we;
  logic [15:0] gst_enable_col_qs;
  logic [15:0] gst_enable_col_wd;
  logic gst_enable_col_we;
  logic gst_comp_state_comp_qs;
  logic gst_comp_state_comp_wd;
  logic gst_comp_state_comp_we;
  logic gst_comp_state_ppe_qs;
  logic gst_comp_state_ppe_wd;
  logic gst_comp_state_ppe_we;
  logic ddr2gb_ctrl_direction_qs;
  logic ddr2gb_ctrl_direction_wd;
  logic ddr2gb_ctrl_direction_we;
  logic ddr2gb_ctrl_go_qs;
  logic ddr2gb_ctrl_go_wd;
  logic ddr2gb_ctrl_go_we;
  logic [31:0] ddr2gb_ddr_addr0_qs;
  logic [31:0] ddr2gb_ddr_addr0_wd;
  logic ddr2gb_ddr_addr0_we;
  logic [21:0] ddr2gb_ddr_addr1_qs;
  logic [21:0] ddr2gb_ddr_addr1_wd;
  logic ddr2gb_ddr_addr1_we;
  logic [10:0] ddr2gb_gb_addr_addr_qs;
  logic [10:0] ddr2gb_gb_addr_addr_wd;
  logic ddr2gb_gb_addr_addr_we;
  logic [2:0] ddr2gb_gb_addr_mux_qs;
  logic [2:0] ddr2gb_gb_addr_mux_wd;
  logic ddr2gb_gb_addr_mux_we;
  logic [5:0] ddr2gb_gb_addr_idx_qs;
  logic [5:0] ddr2gb_gb_addr_idx_wd;
  logic ddr2gb_gb_addr_idx_we;
  logic [7:0] ddr2gb_gb_addr_burst_len_qs;
  logic [7:0] ddr2gb_gb_addr_burst_len_wd;
  logic ddr2gb_gb_addr_burst_len_we;
  logic gb2lb_ctrl_mode_qs;
  logic gb2lb_ctrl_mode_wd;
  logic gb2lb_ctrl_mode_we;
  logic gb2lb_ctrl_go_qs;
  logic gb2lb_ctrl_go_wd;
  logic gb2lb_ctrl_go_we;
  logic [10:0] gb2lb_addr_src_addr_qs;
  logic [10:0] gb2lb_addr_src_addr_wd;
  logic gb2lb_addr_src_addr_we;
  logic [8:0] gb2lb_addr_dest_addr_qs;
  logic [8:0] gb2lb_addr_dest_addr_wd;
  logic gb2lb_addr_dest_addr_we;
  logic [10:0] gb2lb_src0_skip_qs;
  logic [10:0] gb2lb_src0_skip_wd;
  logic gb2lb_src0_skip_we;
  logic [5:0] gb2lb_src0_iter_qs;
  logic [5:0] gb2lb_src0_iter_wd;
  logic gb2lb_src0_iter_we;
  logic [10:0] gb2lb_src1_len_qs;
  logic [10:0] gb2lb_src1_len_wd;
  logic gb2lb_src1_len_we;
  logic [10:0] gb2lb_src1_dila_qs;
  logic [10:0] gb2lb_src1_dila_wd;
  logic gb2lb_src1_dila_we;
  logic [1:0] comp_ctrl_mode_comp_qs;
  logic [1:0] comp_ctrl_mode_comp_wd;
  logic comp_ctrl_mode_comp_we;
  logic [1:0] comp_ctrl_mode_spar_qs;
  logic [1:0] comp_ctrl_mode_spar_wd;
  logic comp_ctrl_mode_spar_we;
  logic comp_ctrl_go_conv_qs;
  logic comp_ctrl_go_conv_wd;
  logic comp_ctrl_go_conv_we;
  logic comp_ctrl_go_fc_qs;
  logic comp_ctrl_go_fc_wd;
  logic comp_ctrl_go_fc_we;
  logic [3:0] comp_k_size_k_size_qs;
  logic [3:0] comp_k_size_k_size_wd;
  logic comp_k_size_k_size_we;
  logic [4:0] comp_k_size_k_scale_qs;
  logic [4:0] comp_k_size_k_scale_wd;
  logic comp_k_size_k_scale_we;
  logic [7:0] comp_f_size_if_len_qs;
  logic [7:0] comp_f_size_if_len_wd;
  logic comp_f_size_if_len_we;
  logic [7:0] comp_f_size_of_len_qs;
  logic [7:0] comp_f_size_of_len_wd;
  logic comp_f_size_of_len_we;
  logic [7:0] comp_c_size_if_chl_qs;
  logic [7:0] comp_c_size_if_chl_wd;
  logic comp_c_size_if_chl_we;
  logic [7:0] comp_c_size_of_chl_qs;
  logic [7:0] comp_c_size_of_chl_wd;
  logic comp_c_size_of_chl_we;
  logic [7:0] comp_p_size_pad_left_qs;
  logic [7:0] comp_p_size_pad_left_wd;
  logic comp_p_size_pad_left_we;
  logic [7:0] comp_p_size_pad_right_qs;
  logic [7:0] comp_p_size_pad_right_wd;
  logic comp_p_size_pad_right_we;
  logic [15:0] comp_p_size_pad_num_qs;
  logic [15:0] comp_p_size_pad_num_wd;
  logic comp_p_size_pad_num_we;
  logic [7:0] comp_fbload_col_qs;
  logic [7:0] comp_fbload_col_wd;
  logic comp_fbload_col_we;
  logic [7:0] comp_fbload_row_qs;
  logic [7:0] comp_fbload_row_wd;
  logic comp_fbload_row_we;
  logic [8:0] comp_addr_lbuf_addr_qs;
  logic [8:0] comp_addr_lbuf_addr_wd;
  logic comp_addr_lbuf_addr_we;
  logic [9:0] comp_addr_wbuf_addr_qs;
  logic [9:0] comp_addr_wbuf_addr_wd;
  logic comp_addr_wbuf_addr_we;
  logic [6:0] comp_addr_ibuf_addr_qs;
  logic [6:0] comp_addr_ibuf_addr_wd;
  logic comp_addr_ibuf_addr_we;
  logic [1:0] ppe_ctrl_ctrl_qs;
  logic [1:0] ppe_ctrl_ctrl_wd;
  logic ppe_ctrl_ctrl_we;
  logic [1:0] ppe_ctrl_post_qs;
  logic [1:0] ppe_ctrl_post_wd;
  logic ppe_ctrl_post_we;
  logic ppe_ctrl_mode_qs;
  logic ppe_ctrl_mode_wd;
  logic ppe_ctrl_mode_we;
  logic ppe_ctrl_rst_qs;
  logic ppe_ctrl_rst_wd;
  logic ppe_ctrl_rst_we;
  logic ppe_ctrl_act_qs;
  logic ppe_ctrl_act_wd;
  logic ppe_ctrl_act_we;
  logic ppe_ctrl_elem_qs;
  logic ppe_ctrl_elem_wd;
  logic ppe_ctrl_elem_we;
  logic [1:0] ppe_ctrl_bias_qs;
  logic [1:0] ppe_ctrl_bias_wd;
  logic ppe_ctrl_bias_we;
  logic ppe_ctrl_pass_qs;
  logic ppe_ctrl_pass_wd;
  logic ppe_ctrl_pass_we;
  logic [1:0] ppe_ctrl_oper_qs;
  logic [1:0] ppe_ctrl_oper_wd;
  logic ppe_ctrl_oper_we;
  logic [3:0] ppe_ctrl_row_num_qs;
  logic [3:0] ppe_ctrl_row_num_wd;
  logic ppe_ctrl_row_num_we;
  logic ppe_ctrl_go_qs;
  logic ppe_ctrl_go_wd;
  logic ppe_ctrl_go_we;
  logic [10:0] ppe_fbuf_addr_fbuf_src_qs;
  logic [10:0] ppe_fbuf_addr_fbuf_src_wd;
  logic ppe_fbuf_addr_fbuf_src_we;
  logic [10:0] ppe_fbuf_addr_fbuf_dest_qs;
  logic [10:0] ppe_fbuf_addr_fbuf_dest_wd;
  logic ppe_fbuf_addr_fbuf_dest_we;
  logic [9:0] ppe_abuf_addr_qs;
  logic [9:0] ppe_abuf_addr_wd;
  logic ppe_abuf_addr_we;
  logic [10:0] ppe_skip_src_skip_qs;
  logic [10:0] ppe_skip_src_skip_wd;
  logic ppe_skip_src_skip_we;
  logic [10:0] ppe_skip_dest_skip_qs;
  logic [10:0] ppe_skip_dest_skip_wd;
  logic ppe_skip_dest_skip_we;
  logic [10:0] ppe_dila_src_dila_qs;
  logic [10:0] ppe_dila_src_dila_wd;
  logic ppe_dila_src_dila_we;
  logic [10:0] ppe_dila_dest_dila_qs;
  logic [10:0] ppe_dila_dest_dila_wd;
  logic ppe_dila_dest_dila_we;
  logic [5:0] ppe_size_len_qs;
  logic [5:0] ppe_size_len_wd;
  logic ppe_size_len_we;
  logic [6:0] ppe_size_iter_qs;
  logic [6:0] ppe_size_iter_wd;
  logic ppe_size_iter_we;
  logic [15:0] ppe_act_k0_act_k0_qs;
  logic [15:0] ppe_act_k0_act_k0_wd;
  logic ppe_act_k0_act_k0_we;
  logic [15:0] ppe_act_k0_act_k1_qs;
  logic [15:0] ppe_act_k0_act_k1_wd;
  logic ppe_act_k0_act_k1_we;
  logic [15:0] ppe_act_k1_act_k2_qs;
  logic [15:0] ppe_act_k1_act_k2_wd;
  logic ppe_act_k1_act_k2_we;
  logic [15:0] ppe_act_k1_act_k3_qs;
  logic [15:0] ppe_act_k1_act_k3_wd;
  logic ppe_act_k1_act_k3_we;
  logic [15:0] ppe_act_k2_act_k4_qs;
  logic [15:0] ppe_act_k2_act_k4_wd;
  logic ppe_act_k2_act_k4_we;
  logic [15:0] ppe_act_k2_act_k5_qs;
  logic [15:0] ppe_act_k2_act_k5_wd;
  logic ppe_act_k2_act_k5_we;
  logic [15:0] ppe_act_k3_act_k6_qs;
  logic [15:0] ppe_act_k3_act_k6_wd;
  logic ppe_act_k3_act_k6_we;
  logic [15:0] ppe_act_k3_act_k7_qs;
  logic [15:0] ppe_act_k3_act_k7_wd;
  logic ppe_act_k3_act_k7_we;
  logic [15:0] ppe_act_k4_act_k8_qs;
  logic [15:0] ppe_act_k4_act_k8_wd;
  logic ppe_act_k4_act_k8_we;
  logic [15:0] ppe_act_k4_act_k9_qs;
  logic [15:0] ppe_act_k4_act_k9_wd;
  logic ppe_act_k4_act_k9_we;
  logic [15:0] ppe_act_k5_act_k10_qs;
  logic [15:0] ppe_act_k5_act_k10_wd;
  logic ppe_act_k5_act_k10_we;
  logic [15:0] ppe_act_k5_act_k11_qs;
  logic [15:0] ppe_act_k5_act_k11_wd;
  logic ppe_act_k5_act_k11_we;
  logic [15:0] ppe_act_k6_act_k12_qs;
  logic [15:0] ppe_act_k6_act_k12_wd;
  logic ppe_act_k6_act_k12_we;
  logic [15:0] ppe_act_k6_act_k13_qs;
  logic [15:0] ppe_act_k6_act_k13_wd;
  logic ppe_act_k6_act_k13_we;
  logic [15:0] ppe_act_k7_act_k14_qs;
  logic [15:0] ppe_act_k7_act_k14_wd;
  logic ppe_act_k7_act_k14_we;
  logic [15:0] ppe_act_k7_act_k15_qs;
  logic [15:0] ppe_act_k7_act_k15_wd;
  logic ppe_act_k7_act_k15_we;
  logic [15:0] ppe_act_b0_act_b0_qs;
  logic [15:0] ppe_act_b0_act_b0_wd;
  logic ppe_act_b0_act_b0_we;
  logic [15:0] ppe_act_b0_act_b1_qs;
  logic [15:0] ppe_act_b0_act_b1_wd;
  logic ppe_act_b0_act_b1_we;
  logic [15:0] ppe_act_b1_act_b2_qs;
  logic [15:0] ppe_act_b1_act_b2_wd;
  logic ppe_act_b1_act_b2_we;
  logic [15:0] ppe_act_b1_act_b3_qs;
  logic [15:0] ppe_act_b1_act_b3_wd;
  logic ppe_act_b1_act_b3_we;
  logic [15:0] ppe_act_b2_act_b4_qs;
  logic [15:0] ppe_act_b2_act_b4_wd;
  logic ppe_act_b2_act_b4_we;
  logic [15:0] ppe_act_b2_act_b5_qs;
  logic [15:0] ppe_act_b2_act_b5_wd;
  logic ppe_act_b2_act_b5_we;
  logic [15:0] ppe_act_b3_act_b6_qs;
  logic [15:0] ppe_act_b3_act_b6_wd;
  logic ppe_act_b3_act_b6_we;
  logic [15:0] ppe_act_b3_act_b7_qs;
  logic [15:0] ppe_act_b3_act_b7_wd;
  logic ppe_act_b3_act_b7_we;
  logic [15:0] ppe_act_b4_act_b8_qs;
  logic [15:0] ppe_act_b4_act_b8_wd;
  logic ppe_act_b4_act_b8_we;
  logic [15:0] ppe_act_b4_act_b9_qs;
  logic [15:0] ppe_act_b4_act_b9_wd;
  logic ppe_act_b4_act_b9_we;
  logic [15:0] ppe_act_b5_act_b10_qs;
  logic [15:0] ppe_act_b5_act_b10_wd;
  logic ppe_act_b5_act_b10_we;
  logic [15:0] ppe_act_b5_act_b11_qs;
  logic [15:0] ppe_act_b5_act_b11_wd;
  logic ppe_act_b5_act_b11_we;
  logic [15:0] ppe_act_b6_act_b12_qs;
  logic [15:0] ppe_act_b6_act_b12_wd;
  logic ppe_act_b6_act_b12_we;
  logic [15:0] ppe_act_b6_act_b13_qs;
  logic [15:0] ppe_act_b6_act_b13_wd;
  logic ppe_act_b6_act_b13_we;
  logic [15:0] ppe_act_b7_act_b14_qs;
  logic [15:0] ppe_act_b7_act_b14_wd;
  logic ppe_act_b7_act_b14_we;
  logic [15:0] ppe_act_b7_act_b15_qs;
  logic [15:0] ppe_act_b7_act_b15_wd;
  logic ppe_act_b7_act_b15_we;
  logic [15:0] ppe_act_x0_act_x0_qs;
  logic [15:0] ppe_act_x0_act_x0_wd;
  logic ppe_act_x0_act_x0_we;
  logic [15:0] ppe_act_x0_act_x1_qs;
  logic [15:0] ppe_act_x0_act_x1_wd;
  logic ppe_act_x0_act_x1_we;
  logic [15:0] ppe_act_x1_act_x2_qs;
  logic [15:0] ppe_act_x1_act_x2_wd;
  logic ppe_act_x1_act_x2_we;
  logic [15:0] ppe_act_x1_act_x3_qs;
  logic [15:0] ppe_act_x1_act_x3_wd;
  logic ppe_act_x1_act_x3_we;
  logic [15:0] ppe_act_x2_act_x4_qs;
  logic [15:0] ppe_act_x2_act_x4_wd;
  logic ppe_act_x2_act_x4_we;
  logic [15:0] ppe_act_x2_act_x5_qs;
  logic [15:0] ppe_act_x2_act_x5_wd;
  logic ppe_act_x2_act_x5_we;
  logic [15:0] ppe_act_x3_act_x6_qs;
  logic [15:0] ppe_act_x3_act_x6_wd;
  logic ppe_act_x3_act_x6_we;
  logic [15:0] ppe_act_x3_act_x7_qs;
  logic [15:0] ppe_act_x3_act_x7_wd;
  logic ppe_act_x3_act_x7_we;
  logic [15:0] ppe_act_x4_act_x8_qs;
  logic [15:0] ppe_act_x4_act_x8_wd;
  logic ppe_act_x4_act_x8_we;
  logic [15:0] ppe_act_x4_act_x9_qs;
  logic [15:0] ppe_act_x4_act_x9_wd;
  logic ppe_act_x4_act_x9_we;
  logic [15:0] ppe_act_x5_act_x10_qs;
  logic [15:0] ppe_act_x5_act_x10_wd;
  logic ppe_act_x5_act_x10_we;
  logic [15:0] ppe_act_x5_act_x11_qs;
  logic [15:0] ppe_act_x5_act_x11_wd;
  logic ppe_act_x5_act_x11_we;
  logic [15:0] ppe_act_x6_act_x12_qs;
  logic [15:0] ppe_act_x6_act_x12_wd;
  logic ppe_act_x6_act_x12_we;
  logic [15:0] ppe_act_x6_act_x13_qs;
  logic [15:0] ppe_act_x6_act_x13_wd;
  logic ppe_act_x6_act_x13_we;
  logic [15:0] ppe_act_x7_qs;
  logic [15:0] ppe_act_x7_wd;
  logic ppe_act_x7_we;
  logic init_calib_complete_qs;
  logic [31:0] ddr_mosi_u_wd;
  logic ddr_mosi_u_we;
  logic [31:0] ddr_mosi_l_wd;
  logic ddr_mosi_l_we;
  logic ddr_mosi_valid_wd;
  logic ddr_mosi_valid_we;
  logic ddr_miso_valid_qs;
  logic ddr_miso_valid_wd;
  logic ddr_miso_valid_we;
  logic [15:0] rxf_ctrl_wptr_qs;
  logic [15:0] rxf_ctrl_wptr_wd;
  logic rxf_ctrl_wptr_we;
  logic [15:0] rxf_ctrl_rptr_qs;
  logic [15:0] rxf_ctrl_rptr_wd;
  logic rxf_ctrl_rptr_we;
  logic cpu_rd_qs;
  logic cpu_rd_wd;
  logic cpu_rd_we;
  logic cpu_access_ddr_qs;
  logic cpu_access_ddr_wd;
  logic cpu_access_ddr_we;

  // Register instances
  // R[intr_state]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intr_state (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intr_state_we),
    .wd     (intr_state_wd),

    // from internal hardware
    .de     (hw2reg.intr_state.de),
    .d      (hw2reg.intr_state.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intr_state.q ),

    // to register interface (read)
    .qs     (intr_state_qs)
  );


  // R[intr_enable]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intr_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intr_enable_we),
    .wd     (intr_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intr_enable.q ),

    // to register interface (read)
    .qs     (intr_enable_qs)
  );


  // R[intr_test]: V(True)

  prim_subreg_ext #(
    .DW    (1)
  ) u_intr_test (
    .re     (1'b0),
    .we     (intr_test_we),
    .wd     (intr_test_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.intr_test.qe),
    .q      (reg2hw.intr_test.q ),
    .qs     ()
  );


  // R[gst_status]: V(False)

  //   F[ddr2gb]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RO"),
    .RESVAL  (1'h0)
  ) u_gst_status_ddr2gb (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.gst_status.ddr2gb.de),
    .d      (hw2reg.gst_status.ddr2gb.d ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (gst_status_ddr2gb_qs)
  );


  //   F[gb2lb]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RO"),
    .RESVAL  (1'h0)
  ) u_gst_status_gb2lb (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.gst_status.gb2lb.de),
    .d      (hw2reg.gst_status.gb2lb.d ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (gst_status_gb2lb_qs)
  );


  //   F[conv]: 2:2
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RO"),
    .RESVAL  (1'h0)
  ) u_gst_status_conv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.gst_status.conv.de),
    .d      (hw2reg.gst_status.conv.d ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (gst_status_conv_qs)
  );


  //   F[fc]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RO"),
    .RESVAL  (1'h0)
  ) u_gst_status_fc (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.gst_status.fc.de),
    .d      (hw2reg.gst_status.fc.d ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (gst_status_fc_qs)
  );


  //   F[ppe]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RO"),
    .RESVAL  (1'h0)
  ) u_gst_status_ppe (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.gst_status.ppe.de),
    .d      (hw2reg.gst_status.ppe.d ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (gst_status_ppe_qs)
  );


  // R[gst_intr]: V(False)

  //   F[ddr2gb]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_gst_intr_ddr2gb (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gst_intr_ddr2gb_we),
    .wd     (gst_intr_ddr2gb_wd),

    // from internal hardware
    .de     (hw2reg.gst_intr.ddr2gb.de),
    .d      (hw2reg.gst_intr.ddr2gb.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gst_intr.ddr2gb.q ),

    // to register interface (read)
    .qs     (gst_intr_ddr2gb_qs)
  );


  //   F[gb2lb]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_gst_intr_gb2lb (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gst_intr_gb2lb_we),
    .wd     (gst_intr_gb2lb_wd),

    // from internal hardware
    .de     (hw2reg.gst_intr.gb2lb.de),
    .d      (hw2reg.gst_intr.gb2lb.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gst_intr.gb2lb.q ),

    // to register interface (read)
    .qs     (gst_intr_gb2lb_qs)
  );


  //   F[conv]: 2:2
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_gst_intr_conv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gst_intr_conv_we),
    .wd     (gst_intr_conv_wd),

    // from internal hardware
    .de     (hw2reg.gst_intr.conv.de),
    .d      (hw2reg.gst_intr.conv.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gst_intr.conv.q ),

    // to register interface (read)
    .qs     (gst_intr_conv_qs)
  );


  //   F[fc]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_gst_intr_fc (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gst_intr_fc_we),
    .wd     (gst_intr_fc_wd),

    // from internal hardware
    .de     (hw2reg.gst_intr.fc.de),
    .d      (hw2reg.gst_intr.fc.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gst_intr.fc.q ),

    // to register interface (read)
    .qs     (gst_intr_fc_qs)
  );


  //   F[ppe]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_gst_intr_ppe (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gst_intr_ppe_we),
    .wd     (gst_intr_ppe_wd),

    // from internal hardware
    .de     (hw2reg.gst_intr.ppe.de),
    .d      (hw2reg.gst_intr.ppe.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gst_intr.ppe.q ),

    // to register interface (read)
    .qs     (gst_intr_ppe_qs)
  );


  // R[gst_enable_row]: V(False)

  prim_subreg #(
    .DW      (16),
    .SWACCESS("RW"),
    .RESVAL  (16'h0)
  ) u_gst_enable_row (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gst_enable_row_we),
    .wd     (gst_enable_row_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gst_enable_row.q ),

    // to register interface (read)
    .qs     (gst_enable_row_qs)
  );


  // R[gst_enable_col]: V(False)

  prim_subreg #(
    .DW      (16),
    .SWACCESS("RW"),
    .RESVAL  (16'h0)
  ) u_gst_enable_col (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gst_enable_col_we),
    .wd     (gst_enable_col_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gst_enable_col.q ),

    // to register interface (read)
    .qs     (gst_enable_col_qs)
  );


  // R[gst_comp_state]: V(False)

  //   F[comp]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_gst_comp_state_comp (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gst_comp_state_comp_we),
    .wd     (gst_comp_state_comp_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gst_comp_state.comp.q ),

    // to register interface (read)
    .qs     (gst_comp_state_comp_qs)
  );


  //   F[ppe]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_gst_comp_state_ppe (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gst_comp_state_ppe_we),
    .wd     (gst_comp_state_ppe_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gst_comp_state.ppe.q ),

    // to register interface (read)
    .qs     (gst_comp_state_ppe_qs)
  );


  // R[ddr2gb_ctrl]: V(False)

  //   F[direction]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_ddr2gb_ctrl_direction (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ddr2gb_ctrl_direction_we),
    .wd     (ddr2gb_ctrl_direction_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (reg2hw.ddr2gb_ctrl.direction.qe),
    .q      (reg2hw.ddr2gb_ctrl.direction.q ),

    // to register interface (read)
    .qs     (ddr2gb_ctrl_direction_qs)
  );


  //   F[go]: 31:31
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_ddr2gb_ctrl_go (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ddr2gb_ctrl_go_we),
    .wd     (ddr2gb_ctrl_go_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (reg2hw.ddr2gb_ctrl.go.qe),
    .q      (reg2hw.ddr2gb_ctrl.go.q ),

    // to register interface (read)
    .qs     (ddr2gb_ctrl_go_qs)
  );


  // R[ddr2gb_ddr_addr0]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_ddr2gb_ddr_addr0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ddr2gb_ddr_addr0_we),
    .wd     (ddr2gb_ddr_addr0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ddr2gb_ddr_addr0.q ),

    // to register interface (read)
    .qs     (ddr2gb_ddr_addr0_qs)
  );


  // R[ddr2gb_ddr_addr1]: V(False)

  prim_subreg #(
    .DW      (22),
    .SWACCESS("RW"),
    .RESVAL  (22'h0)
  ) u_ddr2gb_ddr_addr1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ddr2gb_ddr_addr1_we),
    .wd     (ddr2gb_ddr_addr1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ddr2gb_ddr_addr1.q ),

    // to register interface (read)
    .qs     (ddr2gb_ddr_addr1_qs)
  );


  // R[ddr2gb_gb_addr]: V(False)

  //   F[addr]: 10:0
  prim_subreg #(
    .DW      (11),
    .SWACCESS("RW"),
    .RESVAL  (11'h0)
  ) u_ddr2gb_gb_addr_addr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ddr2gb_gb_addr_addr_we),
    .wd     (ddr2gb_gb_addr_addr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ddr2gb_gb_addr.addr.q ),

    // to register interface (read)
    .qs     (ddr2gb_gb_addr_addr_qs)
  );


  //   F[mux]: 14:12
  prim_subreg #(
    .DW      (3),
    .SWACCESS("RW"),
    .RESVAL  (3'h0)
  ) u_ddr2gb_gb_addr_mux (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ddr2gb_gb_addr_mux_we),
    .wd     (ddr2gb_gb_addr_mux_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ddr2gb_gb_addr.mux.q ),

    // to register interface (read)
    .qs     (ddr2gb_gb_addr_mux_qs)
  );


  //   F[idx]: 21:16
  prim_subreg #(
    .DW      (6),
    .SWACCESS("RW"),
    .RESVAL  (6'h0)
  ) u_ddr2gb_gb_addr_idx (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ddr2gb_gb_addr_idx_we),
    .wd     (ddr2gb_gb_addr_idx_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ddr2gb_gb_addr.idx.q ),

    // to register interface (read)
    .qs     (ddr2gb_gb_addr_idx_qs)
  );


  //   F[burst_len]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_ddr2gb_gb_addr_burst_len (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ddr2gb_gb_addr_burst_len_we),
    .wd     (ddr2gb_gb_addr_burst_len_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ddr2gb_gb_addr.burst_len.q ),

    // to register interface (read)
    .qs     (ddr2gb_gb_addr_burst_len_qs)
  );


  // R[gb2lb_ctrl]: V(False)

  //   F[mode]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_gb2lb_ctrl_mode (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gb2lb_ctrl_mode_we),
    .wd     (gb2lb_ctrl_mode_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (reg2hw.gb2lb_ctrl.mode.qe),
    .q      (reg2hw.gb2lb_ctrl.mode.q ),

    // to register interface (read)
    .qs     (gb2lb_ctrl_mode_qs)
  );


  //   F[go]: 31:31
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_gb2lb_ctrl_go (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gb2lb_ctrl_go_we),
    .wd     (gb2lb_ctrl_go_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (reg2hw.gb2lb_ctrl.go.qe),
    .q      (reg2hw.gb2lb_ctrl.go.q ),

    // to register interface (read)
    .qs     (gb2lb_ctrl_go_qs)
  );


  // R[gb2lb_addr]: V(False)

  //   F[src_addr]: 10:0
  prim_subreg #(
    .DW      (11),
    .SWACCESS("RW"),
    .RESVAL  (11'h0)
  ) u_gb2lb_addr_src_addr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gb2lb_addr_src_addr_we),
    .wd     (gb2lb_addr_src_addr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gb2lb_addr.src_addr.q ),

    // to register interface (read)
    .qs     (gb2lb_addr_src_addr_qs)
  );


  //   F[dest_addr]: 24:16
  prim_subreg #(
    .DW      (9),
    .SWACCESS("RW"),
    .RESVAL  (9'h0)
  ) u_gb2lb_addr_dest_addr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gb2lb_addr_dest_addr_we),
    .wd     (gb2lb_addr_dest_addr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gb2lb_addr.dest_addr.q ),

    // to register interface (read)
    .qs     (gb2lb_addr_dest_addr_qs)
  );


  // R[gb2lb_src0]: V(False)

  //   F[skip]: 10:0
  prim_subreg #(
    .DW      (11),
    .SWACCESS("RW"),
    .RESVAL  (11'h0)
  ) u_gb2lb_src0_skip (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gb2lb_src0_skip_we),
    .wd     (gb2lb_src0_skip_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gb2lb_src0.skip.q ),

    // to register interface (read)
    .qs     (gb2lb_src0_skip_qs)
  );


  //   F[iter]: 21:16
  prim_subreg #(
    .DW      (6),
    .SWACCESS("RW"),
    .RESVAL  (6'h0)
  ) u_gb2lb_src0_iter (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gb2lb_src0_iter_we),
    .wd     (gb2lb_src0_iter_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gb2lb_src0.iter.q ),

    // to register interface (read)
    .qs     (gb2lb_src0_iter_qs)
  );


  // R[gb2lb_src1]: V(False)

  //   F[len]: 10:0
  prim_subreg #(
    .DW      (11),
    .SWACCESS("RW"),
    .RESVAL  (11'h0)
  ) u_gb2lb_src1_len (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gb2lb_src1_len_we),
    .wd     (gb2lb_src1_len_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gb2lb_src1.len.q ),

    // to register interface (read)
    .qs     (gb2lb_src1_len_qs)
  );


  //   F[dila]: 26:16
  prim_subreg #(
    .DW      (11),
    .SWACCESS("RW"),
    .RESVAL  (11'h0)
  ) u_gb2lb_src1_dila (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gb2lb_src1_dila_we),
    .wd     (gb2lb_src1_dila_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.gb2lb_src1.dila.q ),

    // to register interface (read)
    .qs     (gb2lb_src1_dila_qs)
  );


  // R[comp_ctrl]: V(False)

  //   F[mode_comp]: 1:0
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_comp_ctrl_mode_comp (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (comp_ctrl_mode_comp_we),
    .wd     (comp_ctrl_mode_comp_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (reg2hw.comp_ctrl.mode_comp.qe),
    .q      (reg2hw.comp_ctrl.mode_comp.q ),

    // to register interface (read)
    .qs     (comp_ctrl_mode_comp_qs)
  );


  //   F[mode_spar]: 3:2
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_comp_ctrl_mode_spar (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (comp_ctrl_mode_spar_we),
    .wd     (comp_ctrl_mode_spar_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (reg2hw.comp_ctrl.mode_spar.qe),
    .q      (reg2hw.comp_ctrl.mode_spar.q ),

    // to register interface (read)
    .qs     (comp_ctrl_mode_spar_qs)
  );


  //   F[go_conv]: 30:30
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_comp_ctrl_go_conv (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (comp_ctrl_go_conv_we),
    .wd     (comp_ctrl_go_conv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (reg2hw.comp_ctrl.go_conv.qe),
    .q      (reg2hw.comp_ctrl.go_conv.q ),

    // to register interface (read)
    .qs     (comp_ctrl_go_conv_qs)
  );


  //   F[go_fc]: 31:31
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_comp_ctrl_go_fc (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (comp_ctrl_go_fc_we),
    .wd     (comp_ctrl_go_fc_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (reg2hw.comp_ctrl.go_fc.qe),
    .q      (reg2hw.comp_ctrl.go_fc.q ),

    // to register interface (read)
    .qs     (comp_ctrl_go_fc_qs)
  );


  // R[comp_k_size]: V(False)

  //   F[k_size]: 3:0
  prim_subreg #(
    .DW      (4),
    .SWACCESS("RW"),
    .RESVAL  (4'h0)
  ) u_comp_k_size_k_size (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (comp_k_size_k_size_we),
    .wd     (comp_k_size_k_size_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.comp_k_size.k_size.q ),

    // to register interface (read)
    .qs     (comp_k_size_k_size_qs)
  );


  //   F[k_scale]: 20:16
  prim_subreg #(
    .DW      (5),
    .SWACCESS("RW"),
    .RESVAL  (5'h0)
  ) u_comp_k_size_k_scale (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (comp_k_size_k_scale_we),
    .wd     (comp_k_size_k_scale_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.comp_k_size.k_scale.q ),

    // to register interface (read)
    .qs     (comp_k_size_k_scale_qs)
  );


  // R[comp_f_size]: V(False)

  //   F[if_len]: 7:0
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_comp_f_size_if_len (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (comp_f_size_if_len_we),
    .wd     (comp_f_size_if_len_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.comp_f_size.if_len.q ),

    // to register interface (read)
    .qs     (comp_f_size_if_len_qs)
  );


  //   F[of_len]: 23:16
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_comp_f_size_of_len (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (comp_f_size_of_len_we),
    .wd     (comp_f_size_of_len_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.comp_f_size.of_len.q ),

    // to register interface (read)
    .qs     (comp_f_size_of_len_qs)
  );


  // R[comp_c_size]: V(False)

  //   F[if_chl]: 7:0
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_comp_c_size_if_chl (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (comp_c_size_if_chl_we),
    .wd     (comp_c_size_if_chl_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.comp_c_size.if_chl.q ),

    // to register interface (read)
    .qs     (comp_c_size_if_chl_qs)
  );


  //   F[of_chl]: 23:16
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_comp_c_size_of_chl (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (comp_c_size_of_chl_we),
    .wd     (comp_c_size_of_chl_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.comp_c_size.of_chl.q ),

    // to register interface (read)
    .qs     (comp_c_size_of_chl_qs)
  );


  // R[comp_p_size]: V(False)

  //   F[pad_left]: 7:0
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_comp_p_size_pad_left (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (comp_p_size_pad_left_we),
    .wd     (comp_p_size_pad_left_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.comp_p_size.pad_left.q ),

    // to register interface (read)
    .qs     (comp_p_size_pad_left_qs)
  );


  //   F[pad_right]: 15:8
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_comp_p_size_pad_right (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (comp_p_size_pad_right_we),
    .wd     (comp_p_size_pad_right_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.comp_p_size.pad_right.q ),

    // to register interface (read)
    .qs     (comp_p_size_pad_right_qs)
  );


  //   F[pad_num]: 31:16
  prim_subreg #(
    .DW      (16),
    .SWACCESS("RW"),
    .RESVAL  (16'h0)
  ) u_comp_p_size_pad_num (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (comp_p_size_pad_num_we),
    .wd     (comp_p_size_pad_num_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.comp_p_size.pad_num.q ),

    // to register interface (read)
    .qs     (comp_p_size_pad_num_qs)
  );


  // R[comp_fbload]: V(False)

  //   F[col]: 7:0
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_comp_fbload_col (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (comp_fbload_col_we),
    .wd     (comp_fbload_col_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.comp_fbload.col.q ),

    // to register interface (read)
    .qs     (comp_fbload_col_qs)
  );


  //   F[row]: 15:8
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_comp_fbload_row (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (comp_fbload_row_we),
    .wd     (comp_fbload_row_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.comp_fbload.row.q ),

    // to register interface (read)
    .qs     (comp_fbload_row_qs)
  );


  // R[comp_addr]: V(False)

  //   F[lbuf_addr]: 8:0
  prim_subreg #(
    .DW      (9),
    .SWACCESS("RW"),
    .RESVAL  (9'h0)
  ) u_comp_addr_lbuf_addr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (comp_addr_lbuf_addr_we),
    .wd     (comp_addr_lbuf_addr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.comp_addr.lbuf_addr.q ),

    // to register interface (read)
    .qs     (comp_addr_lbuf_addr_qs)
  );


  //   F[wbuf_addr]: 21:12
  prim_subreg #(
    .DW      (10),
    .SWACCESS("RW"),
    .RESVAL  (10'h0)
  ) u_comp_addr_wbuf_addr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (comp_addr_wbuf_addr_we),
    .wd     (comp_addr_wbuf_addr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.comp_addr.wbuf_addr.q ),

    // to register interface (read)
    .qs     (comp_addr_wbuf_addr_qs)
  );


  //   F[ibuf_addr]: 30:24
  prim_subreg #(
    .DW      (7),
    .SWACCESS("RW"),
    .RESVAL  (7'h0)
  ) u_comp_addr_ibuf_addr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (comp_addr_ibuf_addr_we),
    .wd     (comp_addr_ibuf_addr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.comp_addr.ibuf_addr.q ),

    // to register interface (read)
    .qs     (comp_addr_ibuf_addr_qs)
  );


  // R[ppe_ctrl]: V(False)

  //   F[ctrl]: 1:0
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_ppe_ctrl_ctrl (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ppe_ctrl_ctrl_we),
    .wd     (ppe_ctrl_ctrl_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (reg2hw.ppe_ctrl.ctrl.qe),
    .q      (reg2hw.ppe_ctrl.ctrl.q ),

    // to register interface (read)
    .qs     (ppe_ctrl_ctrl_qs)
  );


  //   F[post]: 3:2
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_ppe_ctrl_post (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ppe_ctrl_post_we),
    .wd     (ppe_ctrl_post_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (reg2hw.ppe_ctrl.post.qe),
    .q      (reg2hw.ppe_ctrl.post.q ),

    // to register interface (read)
    .qs     (ppe_ctrl_post_qs)
  );


  //   F[mode]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_ppe_ctrl_mode (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ppe_ctrl_mode_we),
    .wd     (ppe_ctrl_mode_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (reg2hw.ppe_ctrl.mode.qe),
    .q      (reg2hw.ppe_ctrl.mode.q ),

    // to register interface (read)
    .qs     (ppe_ctrl_mode_qs)
  );


  //   F[rst]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_ppe_ctrl_rst (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ppe_ctrl_rst_we),
    .wd     (ppe_ctrl_rst_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (reg2hw.ppe_ctrl.rst.qe),
    .q      (reg2hw.ppe_ctrl.rst.q ),

    // to register interface (read)
    .qs     (ppe_ctrl_rst_qs)
  );


  //   F[act]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_ppe_ctrl_act (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ppe_ctrl_act_we),
    .wd     (ppe_ctrl_act_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (reg2hw.ppe_ctrl.act.qe),
    .q      (reg2hw.ppe_ctrl.act.q ),

    // to register interface (read)
    .qs     (ppe_ctrl_act_qs)
  );


  //   F[elem]: 17:17
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_ppe_ctrl_elem (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ppe_ctrl_elem_we),
    .wd     (ppe_ctrl_elem_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (reg2hw.ppe_ctrl.elem.qe),
    .q      (reg2hw.ppe_ctrl.elem.q ),

    // to register interface (read)
    .qs     (ppe_ctrl_elem_qs)
  );


  //   F[bias]: 19:18
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_ppe_ctrl_bias (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ppe_ctrl_bias_we),
    .wd     (ppe_ctrl_bias_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (reg2hw.ppe_ctrl.bias.qe),
    .q      (reg2hw.ppe_ctrl.bias.q ),

    // to register interface (read)
    .qs     (ppe_ctrl_bias_qs)
  );


  //   F[pass]: 20:20
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_ppe_ctrl_pass (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ppe_ctrl_pass_we),
    .wd     (ppe_ctrl_pass_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (reg2hw.ppe_ctrl.pass.qe),
    .q      (reg2hw.ppe_ctrl.pass.q ),

    // to register interface (read)
    .qs     (ppe_ctrl_pass_qs)
  );


  //   F[oper]: 22:21
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_ppe_ctrl_oper (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ppe_ctrl_oper_we),
    .wd     (ppe_ctrl_oper_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (reg2hw.ppe_ctrl.oper.qe),
    .q      (reg2hw.ppe_ctrl.oper.q ),

    // to register interface (read)
    .qs     (ppe_ctrl_oper_qs)
  );


  //   F[row_num]: 27:24
  prim_subreg #(
    .DW      (4),
    .SWACCESS("RW"),
    .RESVAL  (4'h0)
  ) u_ppe_ctrl_row_num (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ppe_ctrl_row_num_we),
    .wd     (ppe_ctrl_row_num_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (reg2hw.ppe_ctrl.row_num.qe),
    .q      (reg2hw.ppe_ctrl.row_num.q ),

    // to register interface (read)
    .qs     (ppe_ctrl_row_num_qs)
  );


  //   F[go]: 31:31
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_ppe_ctrl_go (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ppe_ctrl_go_we),
    .wd     (ppe_ctrl_go_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (reg2hw.ppe_ctrl.go.qe),
    .q      (reg2hw.ppe_ctrl.go.q ),

    // to register interface (read)
    .qs     (ppe_ctrl_go_qs)
  );


  // R[ppe_fbuf_addr]: V(False)

  //   F[fbuf_src]: 10:0
  prim_subreg #(
    .DW      (11),
    .SWACCESS("RW"),
    .RESVAL  (11'h0)
  ) u_ppe_fbuf_addr_fbuf_src (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ppe_fbuf_addr_fbuf_src_we),
    .wd     (ppe_fbuf_addr_fbuf_src_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ppe_fbuf_addr.fbuf_src.q ),

    // to register interface (read)
    .qs     (ppe_fbuf_addr_fbuf_src_qs)
  );


  //   F[fbuf_dest]: 26:16
  prim_subreg #(
    .DW      (11),
    .SWACCESS("RW"),
    .RESVAL  (11'h0)
  ) u_ppe_fbuf_addr_fbuf_dest (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ppe_fbuf_addr_fbuf_dest_we),
    .wd     (ppe_fbuf_addr_fbuf_dest_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ppe_fbuf_addr.fbuf_dest.q ),

    // to register interface (read)
    .qs     (ppe_fbuf_addr_fbuf_dest_qs)
  );


  // R[ppe_abuf_addr]: V(False)

  prim_subreg #(
    .DW      (10),
    .SWACCESS("RW"),
    .RESVAL  (10'h0)
  ) u_ppe_abuf_addr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ppe_abuf_addr_we),
    .wd     (ppe_abuf_addr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ppe_abuf_addr.q ),

    // to register interface (read)
    .qs     (ppe_abuf_addr_qs)
  );


  // R[ppe_skip]: V(False)

  //   F[src_skip]: 10:0
  prim_subreg #(
    .DW      (11),
    .SWACCESS("RW"),
    .RESVAL  (11'h0)
  ) u_ppe_skip_src_skip (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ppe_skip_src_skip_we),
    .wd     (ppe_skip_src_skip_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ppe_skip.src_skip.q ),

    // to register interface (read)
    .qs     (ppe_skip_src_skip_qs)
  );


  //   F[dest_skip]: 26:16
  prim_subreg #(
    .DW      (11),
    .SWACCESS("RW"),
    .RESVAL  (11'h0)
  ) u_ppe_skip_dest_skip (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ppe_skip_dest_skip_we),
    .wd     (ppe_skip_dest_skip_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ppe_skip.dest_skip.q ),

    // to register interface (read)
    .qs     (ppe_skip_dest_skip_qs)
  );


  // R[ppe_dila]: V(False)

  //   F[src_dila]: 10:0
  prim_subreg #(
    .DW      (11),
    .SWACCESS("RW"),
    .RESVAL  (11'h0)
  ) u_ppe_dila_src_dila (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ppe_dila_src_dila_we),
    .wd     (ppe_dila_src_dila_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ppe_dila.src_dila.q ),

    // to register interface (read)
    .qs     (ppe_dila_src_dila_qs)
  );


  //   F[dest_dila]: 26:16
  prim_subreg #(
    .DW      (11),
    .SWACCESS("RW"),
    .RESVAL  (11'h0)
  ) u_ppe_dila_dest_dila (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ppe_dila_dest_dila_we),
    .wd     (ppe_dila_dest_dila_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ppe_dila.dest_dila.q ),

    // to register interface (read)
    .qs     (ppe_dila_dest_dila_qs)
  );


  // R[ppe_size]: V(False)

  //   F[len]: 5:0
  prim_subreg #(
    .DW      (6),
    .SWACCESS("RW"),
    .RESVAL  (6'h0)
  ) u_ppe_size_len (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ppe_size_len_we),
    .wd     (ppe_size_len_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ppe_size.len.q ),

    // to register interface (read)
    .qs     (ppe_size_len_qs)
  );


  //   F[iter]: 22:16
  prim_subreg #(
    .DW      (7),
    .SWACCESS("RW"),
    .RESVAL  (7'h0)
  ) u_ppe_size_iter (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ppe_size_iter_we),
    .wd     (ppe_size_iter_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ppe_size.iter.q ),

    // to register interface (read)
    .qs     (ppe_size_iter_qs)
  );


  // R[ppe_act_k0]: V(False)

  //   F[act_k0]: 15:0
  prim_subreg #(
    .DW      (16),
    .SWACCESS("RW"),
    .RESVAL  (16'h0)
  ) u_ppe_act_k0_act_k0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ppe_act_k0_act_k0_we),
    .wd     (ppe_act_k0_act_k0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ppe_act_k0.act_k0.q ),

    // to register interface (read)
    .qs     (ppe_act_k0_act_k0_qs)
  );


  //   F[act_k1]: 31:16
  prim_subreg #(
    .DW      (16),
    .SWACCESS("RW"),
    .RESVAL  (16'h0)
  ) u_ppe_act_k0_act_k1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ppe_act_k0_act_k1_we),
    .wd     (ppe_act_k0_act_k1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ppe_act_k0.act_k1.q ),

    // to register interface (read)
    .qs     (ppe_act_k0_act_k1_qs)
  );


  // R[ppe_act_k1]: V(False)

  //   F[act_k2]: 15:0
  prim_subreg #(
    .DW      (16),
    .SWACCESS("RW"),
    .RESVAL  (16'h0)
  ) u_ppe_act_k1_act_k2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ppe_act_k1_act_k2_we),
    .wd     (ppe_act_k1_act_k2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ppe_act_k1.act_k2.q ),

    // to register interface (read)
    .qs     (ppe_act_k1_act_k2_qs)
  );


  //   F[act_k3]: 31:16
  prim_subreg #(
    .DW      (16),
    .SWACCESS("RW"),
    .RESVAL  (16'h0)
  ) u_ppe_act_k1_act_k3 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ppe_act_k1_act_k3_we),
    .wd     (ppe_act_k1_act_k3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ppe_act_k1.act_k3.q ),

    // to register interface (read)
    .qs     (ppe_act_k1_act_k3_qs)
  );


  // R[ppe_act_k2]: V(False)

  //   F[act_k4]: 15:0
  prim_subreg #(
    .DW      (16),
    .SWACCESS("RW"),
    .RESVAL  (16'h0)
  ) u_ppe_act_k2_act_k4 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ppe_act_k2_act_k4_we),
    .wd     (ppe_act_k2_act_k4_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ppe_act_k2.act_k4.q ),

    // to register interface (read)
    .qs     (ppe_act_k2_act_k4_qs)
  );


  //   F[act_k5]: 31:16
  prim_subreg #(
    .DW      (16),
    .SWACCESS("RW"),
    .RESVAL  (16'h0)
  ) u_ppe_act_k2_act_k5 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ppe_act_k2_act_k5_we),
    .wd     (ppe_act_k2_act_k5_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ppe_act_k2.act_k5.q ),

    // to register interface (read)
    .qs     (ppe_act_k2_act_k5_qs)
  );


  // R[ppe_act_k3]: V(False)

  //   F[act_k6]: 15:0
  prim_subreg #(
    .DW      (16),
    .SWACCESS("RW"),
    .RESVAL  (16'h0)
  ) u_ppe_act_k3_act_k6 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ppe_act_k3_act_k6_we),
    .wd     (ppe_act_k3_act_k6_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ppe_act_k3.act_k6.q ),

    // to register interface (read)
    .qs     (ppe_act_k3_act_k6_qs)
  );


  //   F[act_k7]: 31:16
  prim_subreg #(
    .DW      (16),
    .SWACCESS("RW"),
    .RESVAL  (16'h0)
  ) u_ppe_act_k3_act_k7 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ppe_act_k3_act_k7_we),
    .wd     (ppe_act_k3_act_k7_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ppe_act_k3.act_k7.q ),

    // to register interface (read)
    .qs     (ppe_act_k3_act_k7_qs)
  );


  // R[ppe_act_k4]: V(False)

  //   F[act_k8]: 15:0
  prim_subreg #(
    .DW      (16),
    .SWACCESS("RW"),
    .RESVAL  (16'h0)
  ) u_ppe_act_k4_act_k8 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ppe_act_k4_act_k8_we),
    .wd     (ppe_act_k4_act_k8_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ppe_act_k4.act_k8.q ),

    // to register interface (read)
    .qs     (ppe_act_k4_act_k8_qs)
  );


  //   F[act_k9]: 31:16
  prim_subreg #(
    .DW      (16),
    .SWACCESS("RW"),
    .RESVAL  (16'h0)
  ) u_ppe_act_k4_act_k9 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ppe_act_k4_act_k9_we),
    .wd     (ppe_act_k4_act_k9_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ppe_act_k4.act_k9.q ),

    // to register interface (read)
    .qs     (ppe_act_k4_act_k9_qs)
  );


  // R[ppe_act_k5]: V(False)

  //   F[act_k10]: 15:0
  prim_subreg #(
    .DW      (16),
    .SWACCESS("RW"),
    .RESVAL  (16'h0)
  ) u_ppe_act_k5_act_k10 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ppe_act_k5_act_k10_we),
    .wd     (ppe_act_k5_act_k10_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ppe_act_k5.act_k10.q ),

    // to register interface (read)
    .qs     (ppe_act_k5_act_k10_qs)
  );


  //   F[act_k11]: 31:16
  prim_subreg #(
    .DW      (16),
    .SWACCESS("RW"),
    .RESVAL  (16'h0)
  ) u_ppe_act_k5_act_k11 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ppe_act_k5_act_k11_we),
    .wd     (ppe_act_k5_act_k11_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ppe_act_k5.act_k11.q ),

    // to register interface (read)
    .qs     (ppe_act_k5_act_k11_qs)
  );


  // R[ppe_act_k6]: V(False)

  //   F[act_k12]: 15:0
  prim_subreg #(
    .DW      (16),
    .SWACCESS("RW"),
    .RESVAL  (16'h0)
  ) u_ppe_act_k6_act_k12 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ppe_act_k6_act_k12_we),
    .wd     (ppe_act_k6_act_k12_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ppe_act_k6.act_k12.q ),

    // to register interface (read)
    .qs     (ppe_act_k6_act_k12_qs)
  );


  //   F[act_k13]: 31:16
  prim_subreg #(
    .DW      (16),
    .SWACCESS("RW"),
    .RESVAL  (16'h0)
  ) u_ppe_act_k6_act_k13 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ppe_act_k6_act_k13_we),
    .wd     (ppe_act_k6_act_k13_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ppe_act_k6.act_k13.q ),

    // to register interface (read)
    .qs     (ppe_act_k6_act_k13_qs)
  );


  // R[ppe_act_k7]: V(False)

  //   F[act_k14]: 15:0
  prim_subreg #(
    .DW      (16),
    .SWACCESS("RW"),
    .RESVAL  (16'h0)
  ) u_ppe_act_k7_act_k14 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ppe_act_k7_act_k14_we),
    .wd     (ppe_act_k7_act_k14_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ppe_act_k7.act_k14.q ),

    // to register interface (read)
    .qs     (ppe_act_k7_act_k14_qs)
  );


  //   F[act_k15]: 31:16
  prim_subreg #(
    .DW      (16),
    .SWACCESS("RW"),
    .RESVAL  (16'h0)
  ) u_ppe_act_k7_act_k15 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ppe_act_k7_act_k15_we),
    .wd     (ppe_act_k7_act_k15_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ppe_act_k7.act_k15.q ),

    // to register interface (read)
    .qs     (ppe_act_k7_act_k15_qs)
  );


  // R[ppe_act_b0]: V(False)

  //   F[act_b0]: 15:0
  prim_subreg #(
    .DW      (16),
    .SWACCESS("RW"),
    .RESVAL  (16'h0)
  ) u_ppe_act_b0_act_b0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ppe_act_b0_act_b0_we),
    .wd     (ppe_act_b0_act_b0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ppe_act_b0.act_b0.q ),

    // to register interface (read)
    .qs     (ppe_act_b0_act_b0_qs)
  );


  //   F[act_b1]: 31:16
  prim_subreg #(
    .DW      (16),
    .SWACCESS("RW"),
    .RESVAL  (16'h0)
  ) u_ppe_act_b0_act_b1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ppe_act_b0_act_b1_we),
    .wd     (ppe_act_b0_act_b1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ppe_act_b0.act_b1.q ),

    // to register interface (read)
    .qs     (ppe_act_b0_act_b1_qs)
  );


  // R[ppe_act_b1]: V(False)

  //   F[act_b2]: 15:0
  prim_subreg #(
    .DW      (16),
    .SWACCESS("RW"),
    .RESVAL  (16'h0)
  ) u_ppe_act_b1_act_b2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ppe_act_b1_act_b2_we),
    .wd     (ppe_act_b1_act_b2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ppe_act_b1.act_b2.q ),

    // to register interface (read)
    .qs     (ppe_act_b1_act_b2_qs)
  );


  //   F[act_b3]: 31:16
  prim_subreg #(
    .DW      (16),
    .SWACCESS("RW"),
    .RESVAL  (16'h0)
  ) u_ppe_act_b1_act_b3 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ppe_act_b1_act_b3_we),
    .wd     (ppe_act_b1_act_b3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ppe_act_b1.act_b3.q ),

    // to register interface (read)
    .qs     (ppe_act_b1_act_b3_qs)
  );


  // R[ppe_act_b2]: V(False)

  //   F[act_b4]: 15:0
  prim_subreg #(
    .DW      (16),
    .SWACCESS("RW"),
    .RESVAL  (16'h0)
  ) u_ppe_act_b2_act_b4 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ppe_act_b2_act_b4_we),
    .wd     (ppe_act_b2_act_b4_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ppe_act_b2.act_b4.q ),

    // to register interface (read)
    .qs     (ppe_act_b2_act_b4_qs)
  );


  //   F[act_b5]: 31:16
  prim_subreg #(
    .DW      (16),
    .SWACCESS("RW"),
    .RESVAL  (16'h0)
  ) u_ppe_act_b2_act_b5 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ppe_act_b2_act_b5_we),
    .wd     (ppe_act_b2_act_b5_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ppe_act_b2.act_b5.q ),

    // to register interface (read)
    .qs     (ppe_act_b2_act_b5_qs)
  );


  // R[ppe_act_b3]: V(False)

  //   F[act_b6]: 15:0
  prim_subreg #(
    .DW      (16),
    .SWACCESS("RW"),
    .RESVAL  (16'h0)
  ) u_ppe_act_b3_act_b6 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ppe_act_b3_act_b6_we),
    .wd     (ppe_act_b3_act_b6_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ppe_act_b3.act_b6.q ),

    // to register interface (read)
    .qs     (ppe_act_b3_act_b6_qs)
  );


  //   F[act_b7]: 31:16
  prim_subreg #(
    .DW      (16),
    .SWACCESS("RW"),
    .RESVAL  (16'h0)
  ) u_ppe_act_b3_act_b7 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ppe_act_b3_act_b7_we),
    .wd     (ppe_act_b3_act_b7_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ppe_act_b3.act_b7.q ),

    // to register interface (read)
    .qs     (ppe_act_b3_act_b7_qs)
  );


  // R[ppe_act_b4]: V(False)

  //   F[act_b8]: 15:0
  prim_subreg #(
    .DW      (16),
    .SWACCESS("RW"),
    .RESVAL  (16'h0)
  ) u_ppe_act_b4_act_b8 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ppe_act_b4_act_b8_we),
    .wd     (ppe_act_b4_act_b8_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ppe_act_b4.act_b8.q ),

    // to register interface (read)
    .qs     (ppe_act_b4_act_b8_qs)
  );


  //   F[act_b9]: 31:16
  prim_subreg #(
    .DW      (16),
    .SWACCESS("RW"),
    .RESVAL  (16'h0)
  ) u_ppe_act_b4_act_b9 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ppe_act_b4_act_b9_we),
    .wd     (ppe_act_b4_act_b9_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ppe_act_b4.act_b9.q ),

    // to register interface (read)
    .qs     (ppe_act_b4_act_b9_qs)
  );


  // R[ppe_act_b5]: V(False)

  //   F[act_b10]: 15:0
  prim_subreg #(
    .DW      (16),
    .SWACCESS("RW"),
    .RESVAL  (16'h0)
  ) u_ppe_act_b5_act_b10 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ppe_act_b5_act_b10_we),
    .wd     (ppe_act_b5_act_b10_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ppe_act_b5.act_b10.q ),

    // to register interface (read)
    .qs     (ppe_act_b5_act_b10_qs)
  );


  //   F[act_b11]: 31:16
  prim_subreg #(
    .DW      (16),
    .SWACCESS("RW"),
    .RESVAL  (16'h0)
  ) u_ppe_act_b5_act_b11 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ppe_act_b5_act_b11_we),
    .wd     (ppe_act_b5_act_b11_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ppe_act_b5.act_b11.q ),

    // to register interface (read)
    .qs     (ppe_act_b5_act_b11_qs)
  );


  // R[ppe_act_b6]: V(False)

  //   F[act_b12]: 15:0
  prim_subreg #(
    .DW      (16),
    .SWACCESS("RW"),
    .RESVAL  (16'h0)
  ) u_ppe_act_b6_act_b12 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ppe_act_b6_act_b12_we),
    .wd     (ppe_act_b6_act_b12_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ppe_act_b6.act_b12.q ),

    // to register interface (read)
    .qs     (ppe_act_b6_act_b12_qs)
  );


  //   F[act_b13]: 31:16
  prim_subreg #(
    .DW      (16),
    .SWACCESS("RW"),
    .RESVAL  (16'h0)
  ) u_ppe_act_b6_act_b13 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ppe_act_b6_act_b13_we),
    .wd     (ppe_act_b6_act_b13_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ppe_act_b6.act_b13.q ),

    // to register interface (read)
    .qs     (ppe_act_b6_act_b13_qs)
  );


  // R[ppe_act_b7]: V(False)

  //   F[act_b14]: 15:0
  prim_subreg #(
    .DW      (16),
    .SWACCESS("RW"),
    .RESVAL  (16'h0)
  ) u_ppe_act_b7_act_b14 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ppe_act_b7_act_b14_we),
    .wd     (ppe_act_b7_act_b14_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ppe_act_b7.act_b14.q ),

    // to register interface (read)
    .qs     (ppe_act_b7_act_b14_qs)
  );


  //   F[act_b15]: 31:16
  prim_subreg #(
    .DW      (16),
    .SWACCESS("RW"),
    .RESVAL  (16'h0)
  ) u_ppe_act_b7_act_b15 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ppe_act_b7_act_b15_we),
    .wd     (ppe_act_b7_act_b15_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ppe_act_b7.act_b15.q ),

    // to register interface (read)
    .qs     (ppe_act_b7_act_b15_qs)
  );


  // R[ppe_act_x0]: V(False)

  //   F[act_x0]: 15:0
  prim_subreg #(
    .DW      (16),
    .SWACCESS("RW"),
    .RESVAL  (16'h0)
  ) u_ppe_act_x0_act_x0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ppe_act_x0_act_x0_we),
    .wd     (ppe_act_x0_act_x0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ppe_act_x0.act_x0.q ),

    // to register interface (read)
    .qs     (ppe_act_x0_act_x0_qs)
  );


  //   F[act_x1]: 31:16
  prim_subreg #(
    .DW      (16),
    .SWACCESS("RW"),
    .RESVAL  (16'h0)
  ) u_ppe_act_x0_act_x1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ppe_act_x0_act_x1_we),
    .wd     (ppe_act_x0_act_x1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ppe_act_x0.act_x1.q ),

    // to register interface (read)
    .qs     (ppe_act_x0_act_x1_qs)
  );


  // R[ppe_act_x1]: V(False)

  //   F[act_x2]: 15:0
  prim_subreg #(
    .DW      (16),
    .SWACCESS("RW"),
    .RESVAL  (16'h0)
  ) u_ppe_act_x1_act_x2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ppe_act_x1_act_x2_we),
    .wd     (ppe_act_x1_act_x2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ppe_act_x1.act_x2.q ),

    // to register interface (read)
    .qs     (ppe_act_x1_act_x2_qs)
  );


  //   F[act_x3]: 31:16
  prim_subreg #(
    .DW      (16),
    .SWACCESS("RW"),
    .RESVAL  (16'h0)
  ) u_ppe_act_x1_act_x3 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ppe_act_x1_act_x3_we),
    .wd     (ppe_act_x1_act_x3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ppe_act_x1.act_x3.q ),

    // to register interface (read)
    .qs     (ppe_act_x1_act_x3_qs)
  );


  // R[ppe_act_x2]: V(False)

  //   F[act_x4]: 15:0
  prim_subreg #(
    .DW      (16),
    .SWACCESS("RW"),
    .RESVAL  (16'h0)
  ) u_ppe_act_x2_act_x4 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ppe_act_x2_act_x4_we),
    .wd     (ppe_act_x2_act_x4_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ppe_act_x2.act_x4.q ),

    // to register interface (read)
    .qs     (ppe_act_x2_act_x4_qs)
  );


  //   F[act_x5]: 31:16
  prim_subreg #(
    .DW      (16),
    .SWACCESS("RW"),
    .RESVAL  (16'h0)
  ) u_ppe_act_x2_act_x5 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ppe_act_x2_act_x5_we),
    .wd     (ppe_act_x2_act_x5_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ppe_act_x2.act_x5.q ),

    // to register interface (read)
    .qs     (ppe_act_x2_act_x5_qs)
  );


  // R[ppe_act_x3]: V(False)

  //   F[act_x6]: 15:0
  prim_subreg #(
    .DW      (16),
    .SWACCESS("RW"),
    .RESVAL  (16'h0)
  ) u_ppe_act_x3_act_x6 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ppe_act_x3_act_x6_we),
    .wd     (ppe_act_x3_act_x6_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ppe_act_x3.act_x6.q ),

    // to register interface (read)
    .qs     (ppe_act_x3_act_x6_qs)
  );


  //   F[act_x7]: 31:16
  prim_subreg #(
    .DW      (16),
    .SWACCESS("RW"),
    .RESVAL  (16'h0)
  ) u_ppe_act_x3_act_x7 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ppe_act_x3_act_x7_we),
    .wd     (ppe_act_x3_act_x7_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ppe_act_x3.act_x7.q ),

    // to register interface (read)
    .qs     (ppe_act_x3_act_x7_qs)
  );


  // R[ppe_act_x4]: V(False)

  //   F[act_x8]: 15:0
  prim_subreg #(
    .DW      (16),
    .SWACCESS("RW"),
    .RESVAL  (16'h0)
  ) u_ppe_act_x4_act_x8 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ppe_act_x4_act_x8_we),
    .wd     (ppe_act_x4_act_x8_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ppe_act_x4.act_x8.q ),

    // to register interface (read)
    .qs     (ppe_act_x4_act_x8_qs)
  );


  //   F[act_x9]: 31:16
  prim_subreg #(
    .DW      (16),
    .SWACCESS("RW"),
    .RESVAL  (16'h0)
  ) u_ppe_act_x4_act_x9 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ppe_act_x4_act_x9_we),
    .wd     (ppe_act_x4_act_x9_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ppe_act_x4.act_x9.q ),

    // to register interface (read)
    .qs     (ppe_act_x4_act_x9_qs)
  );


  // R[ppe_act_x5]: V(False)

  //   F[act_x10]: 15:0
  prim_subreg #(
    .DW      (16),
    .SWACCESS("RW"),
    .RESVAL  (16'h0)
  ) u_ppe_act_x5_act_x10 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ppe_act_x5_act_x10_we),
    .wd     (ppe_act_x5_act_x10_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ppe_act_x5.act_x10.q ),

    // to register interface (read)
    .qs     (ppe_act_x5_act_x10_qs)
  );


  //   F[act_x11]: 31:16
  prim_subreg #(
    .DW      (16),
    .SWACCESS("RW"),
    .RESVAL  (16'h0)
  ) u_ppe_act_x5_act_x11 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ppe_act_x5_act_x11_we),
    .wd     (ppe_act_x5_act_x11_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ppe_act_x5.act_x11.q ),

    // to register interface (read)
    .qs     (ppe_act_x5_act_x11_qs)
  );


  // R[ppe_act_x6]: V(False)

  //   F[act_x12]: 15:0
  prim_subreg #(
    .DW      (16),
    .SWACCESS("RW"),
    .RESVAL  (16'h0)
  ) u_ppe_act_x6_act_x12 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ppe_act_x6_act_x12_we),
    .wd     (ppe_act_x6_act_x12_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ppe_act_x6.act_x12.q ),

    // to register interface (read)
    .qs     (ppe_act_x6_act_x12_qs)
  );


  //   F[act_x13]: 31:16
  prim_subreg #(
    .DW      (16),
    .SWACCESS("RW"),
    .RESVAL  (16'h0)
  ) u_ppe_act_x6_act_x13 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ppe_act_x6_act_x13_we),
    .wd     (ppe_act_x6_act_x13_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ppe_act_x6.act_x13.q ),

    // to register interface (read)
    .qs     (ppe_act_x6_act_x13_qs)
  );


  // R[ppe_act_x7]: V(False)

  prim_subreg #(
    .DW      (16),
    .SWACCESS("RW"),
    .RESVAL  (16'h0)
  ) u_ppe_act_x7 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ppe_act_x7_we),
    .wd     (ppe_act_x7_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ppe_act_x7.q ),

    // to register interface (read)
    .qs     (ppe_act_x7_qs)
  );


  // R[init_calib_complete]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RO"),
    .RESVAL  (1'h0)
  ) u_init_calib_complete (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.init_calib_complete.de),
    .d      (hw2reg.init_calib_complete.d ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (init_calib_complete_qs)
  );


  // R[ddr_mosi_u]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_ddr_mosi_u (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ddr_mosi_u_we),
    .wd     (ddr_mosi_u_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ddr_mosi_u.q ),

    .qs     ()
  );


  // R[ddr_mosi_l]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_ddr_mosi_l (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ddr_mosi_l_we),
    .wd     (ddr_mosi_l_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ddr_mosi_l.q ),

    .qs     ()
  );


  // R[ddr_mosi_valid]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_ddr_mosi_valid (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ddr_mosi_valid_we),
    .wd     (ddr_mosi_valid_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (reg2hw.ddr_mosi_valid.qe),
    .q      (reg2hw.ddr_mosi_valid.q ),

    .qs     ()
  );


  // R[ddr_miso_valid]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_ddr_miso_valid (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ddr_miso_valid_we),
    .wd     (ddr_miso_valid_wd),

    // from internal hardware
    .de     (hw2reg.ddr_miso_valid.de),
    .d      (hw2reg.ddr_miso_valid.d ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (ddr_miso_valid_qs)
  );


  // R[rxf_ctrl]: V(False)

  //   F[wptr]: 15:0
  prim_subreg #(
    .DW      (16),
    .SWACCESS("RW"),
    .RESVAL  (16'h0)
  ) u_rxf_ctrl_wptr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (rxf_ctrl_wptr_we),
    .wd     (rxf_ctrl_wptr_wd),

    // from internal hardware
    .de     (hw2reg.rxf_ctrl.wptr.de),
    .d      (hw2reg.rxf_ctrl.wptr.d ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (rxf_ctrl_wptr_qs)
  );


  //   F[rptr]: 31:16
  prim_subreg #(
    .DW      (16),
    .SWACCESS("RW"),
    .RESVAL  (16'h0)
  ) u_rxf_ctrl_rptr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (rxf_ctrl_rptr_we),
    .wd     (rxf_ctrl_rptr_wd),

    // from internal hardware
    .de     (hw2reg.rxf_ctrl.rptr.de),
    .d      (hw2reg.rxf_ctrl.rptr.d ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (rxf_ctrl_rptr_qs)
  );


  // R[cpu_rd]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_cpu_rd (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cpu_rd_we),
    .wd     (cpu_rd_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cpu_rd.q ),

    // to register interface (read)
    .qs     (cpu_rd_qs)
  );


  // R[cpu_access_ddr]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_cpu_access_ddr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cpu_access_ddr_we),
    .wd     (cpu_access_ddr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cpu_access_ddr.q ),

    // to register interface (read)
    .qs     (cpu_access_ddr_qs)
  );




  logic [60:0] addr_hit;
  always_comb begin
    addr_hit = '0;
    addr_hit[ 0] = (reg_addr == DLA_INTR_STATE_OFFSET);
    addr_hit[ 1] = (reg_addr == DLA_INTR_ENABLE_OFFSET);
    addr_hit[ 2] = (reg_addr == DLA_INTR_TEST_OFFSET);
    addr_hit[ 3] = (reg_addr == DLA_GST_STATUS_OFFSET);
    addr_hit[ 4] = (reg_addr == DLA_GST_INTR_OFFSET);
    addr_hit[ 5] = (reg_addr == DLA_GST_ENABLE_ROW_OFFSET);
    addr_hit[ 6] = (reg_addr == DLA_GST_ENABLE_COL_OFFSET);
    addr_hit[ 7] = (reg_addr == DLA_GST_COMP_STATE_OFFSET);
    addr_hit[ 8] = (reg_addr == DLA_DDR2GB_CTRL_OFFSET);
    addr_hit[ 9] = (reg_addr == DLA_DDR2GB_DDR_ADDR0_OFFSET);
    addr_hit[10] = (reg_addr == DLA_DDR2GB_DDR_ADDR1_OFFSET);
    addr_hit[11] = (reg_addr == DLA_DDR2GB_GB_ADDR_OFFSET);
    addr_hit[12] = (reg_addr == DLA_GB2LB_CTRL_OFFSET);
    addr_hit[13] = (reg_addr == DLA_GB2LB_ADDR_OFFSET);
    addr_hit[14] = (reg_addr == DLA_GB2LB_SRC0_OFFSET);
    addr_hit[15] = (reg_addr == DLA_GB2LB_SRC1_OFFSET);
    addr_hit[16] = (reg_addr == DLA_COMP_CTRL_OFFSET);
    addr_hit[17] = (reg_addr == DLA_COMP_K_SIZE_OFFSET);
    addr_hit[18] = (reg_addr == DLA_COMP_F_SIZE_OFFSET);
    addr_hit[19] = (reg_addr == DLA_COMP_C_SIZE_OFFSET);
    addr_hit[20] = (reg_addr == DLA_COMP_P_SIZE_OFFSET);
    addr_hit[21] = (reg_addr == DLA_COMP_FBLOAD_OFFSET);
    addr_hit[22] = (reg_addr == DLA_COMP_ADDR_OFFSET);
    addr_hit[23] = (reg_addr == DLA_PPE_CTRL_OFFSET);
    addr_hit[24] = (reg_addr == DLA_PPE_FBUF_ADDR_OFFSET);
    addr_hit[25] = (reg_addr == DLA_PPE_ABUF_ADDR_OFFSET);
    addr_hit[26] = (reg_addr == DLA_PPE_SKIP_OFFSET);
    addr_hit[27] = (reg_addr == DLA_PPE_DILA_OFFSET);
    addr_hit[28] = (reg_addr == DLA_PPE_SIZE_OFFSET);
    addr_hit[29] = (reg_addr == DLA_PPE_ACT_K0_OFFSET);
    addr_hit[30] = (reg_addr == DLA_PPE_ACT_K1_OFFSET);
    addr_hit[31] = (reg_addr == DLA_PPE_ACT_K2_OFFSET);
    addr_hit[32] = (reg_addr == DLA_PPE_ACT_K3_OFFSET);
    addr_hit[33] = (reg_addr == DLA_PPE_ACT_K4_OFFSET);
    addr_hit[34] = (reg_addr == DLA_PPE_ACT_K5_OFFSET);
    addr_hit[35] = (reg_addr == DLA_PPE_ACT_K6_OFFSET);
    addr_hit[36] = (reg_addr == DLA_PPE_ACT_K7_OFFSET);
    addr_hit[37] = (reg_addr == DLA_PPE_ACT_B0_OFFSET);
    addr_hit[38] = (reg_addr == DLA_PPE_ACT_B1_OFFSET);
    addr_hit[39] = (reg_addr == DLA_PPE_ACT_B2_OFFSET);
    addr_hit[40] = (reg_addr == DLA_PPE_ACT_B3_OFFSET);
    addr_hit[41] = (reg_addr == DLA_PPE_ACT_B4_OFFSET);
    addr_hit[42] = (reg_addr == DLA_PPE_ACT_B5_OFFSET);
    addr_hit[43] = (reg_addr == DLA_PPE_ACT_B6_OFFSET);
    addr_hit[44] = (reg_addr == DLA_PPE_ACT_B7_OFFSET);
    addr_hit[45] = (reg_addr == DLA_PPE_ACT_X0_OFFSET);
    addr_hit[46] = (reg_addr == DLA_PPE_ACT_X1_OFFSET);
    addr_hit[47] = (reg_addr == DLA_PPE_ACT_X2_OFFSET);
    addr_hit[48] = (reg_addr == DLA_PPE_ACT_X3_OFFSET);
    addr_hit[49] = (reg_addr == DLA_PPE_ACT_X4_OFFSET);
    addr_hit[50] = (reg_addr == DLA_PPE_ACT_X5_OFFSET);
    addr_hit[51] = (reg_addr == DLA_PPE_ACT_X6_OFFSET);
    addr_hit[52] = (reg_addr == DLA_PPE_ACT_X7_OFFSET);
    addr_hit[53] = (reg_addr == DLA_INIT_CALIB_COMPLETE_OFFSET);
    addr_hit[54] = (reg_addr == DLA_DDR_MOSI_U_OFFSET);
    addr_hit[55] = (reg_addr == DLA_DDR_MOSI_L_OFFSET);
    addr_hit[56] = (reg_addr == DLA_DDR_MOSI_VALID_OFFSET);
    addr_hit[57] = (reg_addr == DLA_DDR_MISO_VALID_OFFSET);
    addr_hit[58] = (reg_addr == DLA_RXF_CTRL_OFFSET);
    addr_hit[59] = (reg_addr == DLA_CPU_RD_OFFSET);
    addr_hit[60] = (reg_addr == DLA_CPU_ACCESS_DDR_OFFSET);
  end

  assign addrmiss = (reg_re || reg_we) ? ~|addr_hit : 1'b0 ;

  // Check sub-word write is permitted
  always_comb begin
    wr_err = 1'b0;
    if (addr_hit[ 0] && reg_we && (DLA_PERMIT[ 0] != (DLA_PERMIT[ 0] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[ 1] && reg_we && (DLA_PERMIT[ 1] != (DLA_PERMIT[ 1] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[ 2] && reg_we && (DLA_PERMIT[ 2] != (DLA_PERMIT[ 2] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[ 3] && reg_we && (DLA_PERMIT[ 3] != (DLA_PERMIT[ 3] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[ 4] && reg_we && (DLA_PERMIT[ 4] != (DLA_PERMIT[ 4] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[ 5] && reg_we && (DLA_PERMIT[ 5] != (DLA_PERMIT[ 5] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[ 6] && reg_we && (DLA_PERMIT[ 6] != (DLA_PERMIT[ 6] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[ 7] && reg_we && (DLA_PERMIT[ 7] != (DLA_PERMIT[ 7] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[ 8] && reg_we && (DLA_PERMIT[ 8] != (DLA_PERMIT[ 8] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[ 9] && reg_we && (DLA_PERMIT[ 9] != (DLA_PERMIT[ 9] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[10] && reg_we && (DLA_PERMIT[10] != (DLA_PERMIT[10] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[11] && reg_we && (DLA_PERMIT[11] != (DLA_PERMIT[11] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[12] && reg_we && (DLA_PERMIT[12] != (DLA_PERMIT[12] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[13] && reg_we && (DLA_PERMIT[13] != (DLA_PERMIT[13] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[14] && reg_we && (DLA_PERMIT[14] != (DLA_PERMIT[14] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[15] && reg_we && (DLA_PERMIT[15] != (DLA_PERMIT[15] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[16] && reg_we && (DLA_PERMIT[16] != (DLA_PERMIT[16] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[17] && reg_we && (DLA_PERMIT[17] != (DLA_PERMIT[17] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[18] && reg_we && (DLA_PERMIT[18] != (DLA_PERMIT[18] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[19] && reg_we && (DLA_PERMIT[19] != (DLA_PERMIT[19] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[20] && reg_we && (DLA_PERMIT[20] != (DLA_PERMIT[20] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[21] && reg_we && (DLA_PERMIT[21] != (DLA_PERMIT[21] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[22] && reg_we && (DLA_PERMIT[22] != (DLA_PERMIT[22] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[23] && reg_we && (DLA_PERMIT[23] != (DLA_PERMIT[23] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[24] && reg_we && (DLA_PERMIT[24] != (DLA_PERMIT[24] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[25] && reg_we && (DLA_PERMIT[25] != (DLA_PERMIT[25] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[26] && reg_we && (DLA_PERMIT[26] != (DLA_PERMIT[26] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[27] && reg_we && (DLA_PERMIT[27] != (DLA_PERMIT[27] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[28] && reg_we && (DLA_PERMIT[28] != (DLA_PERMIT[28] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[29] && reg_we && (DLA_PERMIT[29] != (DLA_PERMIT[29] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[30] && reg_we && (DLA_PERMIT[30] != (DLA_PERMIT[30] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[31] && reg_we && (DLA_PERMIT[31] != (DLA_PERMIT[31] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[32] && reg_we && (DLA_PERMIT[32] != (DLA_PERMIT[32] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[33] && reg_we && (DLA_PERMIT[33] != (DLA_PERMIT[33] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[34] && reg_we && (DLA_PERMIT[34] != (DLA_PERMIT[34] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[35] && reg_we && (DLA_PERMIT[35] != (DLA_PERMIT[35] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[36] && reg_we && (DLA_PERMIT[36] != (DLA_PERMIT[36] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[37] && reg_we && (DLA_PERMIT[37] != (DLA_PERMIT[37] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[38] && reg_we && (DLA_PERMIT[38] != (DLA_PERMIT[38] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[39] && reg_we && (DLA_PERMIT[39] != (DLA_PERMIT[39] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[40] && reg_we && (DLA_PERMIT[40] != (DLA_PERMIT[40] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[41] && reg_we && (DLA_PERMIT[41] != (DLA_PERMIT[41] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[42] && reg_we && (DLA_PERMIT[42] != (DLA_PERMIT[42] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[43] && reg_we && (DLA_PERMIT[43] != (DLA_PERMIT[43] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[44] && reg_we && (DLA_PERMIT[44] != (DLA_PERMIT[44] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[45] && reg_we && (DLA_PERMIT[45] != (DLA_PERMIT[45] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[46] && reg_we && (DLA_PERMIT[46] != (DLA_PERMIT[46] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[47] && reg_we && (DLA_PERMIT[47] != (DLA_PERMIT[47] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[48] && reg_we && (DLA_PERMIT[48] != (DLA_PERMIT[48] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[49] && reg_we && (DLA_PERMIT[49] != (DLA_PERMIT[49] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[50] && reg_we && (DLA_PERMIT[50] != (DLA_PERMIT[50] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[51] && reg_we && (DLA_PERMIT[51] != (DLA_PERMIT[51] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[52] && reg_we && (DLA_PERMIT[52] != (DLA_PERMIT[52] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[53] && reg_we && (DLA_PERMIT[53] != (DLA_PERMIT[53] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[54] && reg_we && (DLA_PERMIT[54] != (DLA_PERMIT[54] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[55] && reg_we && (DLA_PERMIT[55] != (DLA_PERMIT[55] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[56] && reg_we && (DLA_PERMIT[56] != (DLA_PERMIT[56] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[57] && reg_we && (DLA_PERMIT[57] != (DLA_PERMIT[57] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[58] && reg_we && (DLA_PERMIT[58] != (DLA_PERMIT[58] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[59] && reg_we && (DLA_PERMIT[59] != (DLA_PERMIT[59] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[60] && reg_we && (DLA_PERMIT[60] != (DLA_PERMIT[60] & reg_be))) wr_err = 1'b1 ;
  end

  assign intr_state_we = addr_hit[0] & reg_we & ~wr_err;
  assign intr_state_wd = reg_wdata[0];

  assign intr_enable_we = addr_hit[1] & reg_we & ~wr_err;
  assign intr_enable_wd = reg_wdata[0];

  assign intr_test_we = addr_hit[2] & reg_we & ~wr_err;
  assign intr_test_wd = reg_wdata[0];






  assign gst_intr_ddr2gb_we = addr_hit[4] & reg_we & ~wr_err;
  assign gst_intr_ddr2gb_wd = reg_wdata[0];

  assign gst_intr_gb2lb_we = addr_hit[4] & reg_we & ~wr_err;
  assign gst_intr_gb2lb_wd = reg_wdata[1];

  assign gst_intr_conv_we = addr_hit[4] & reg_we & ~wr_err;
  assign gst_intr_conv_wd = reg_wdata[2];

  assign gst_intr_fc_we = addr_hit[4] & reg_we & ~wr_err;
  assign gst_intr_fc_wd = reg_wdata[3];

  assign gst_intr_ppe_we = addr_hit[4] & reg_we & ~wr_err;
  assign gst_intr_ppe_wd = reg_wdata[4];

  assign gst_enable_row_we = addr_hit[5] & reg_we & ~wr_err;
  assign gst_enable_row_wd = reg_wdata[15:0];

  assign gst_enable_col_we = addr_hit[6] & reg_we & ~wr_err;
  assign gst_enable_col_wd = reg_wdata[15:0];

  assign gst_comp_state_comp_we = addr_hit[7] & reg_we & ~wr_err;
  assign gst_comp_state_comp_wd = reg_wdata[0];

  assign gst_comp_state_ppe_we = addr_hit[7] & reg_we & ~wr_err;
  assign gst_comp_state_ppe_wd = reg_wdata[1];

  assign ddr2gb_ctrl_direction_we = addr_hit[8] & reg_we & ~wr_err;
  assign ddr2gb_ctrl_direction_wd = reg_wdata[0];

  assign ddr2gb_ctrl_go_we = addr_hit[8] & reg_we & ~wr_err;
  assign ddr2gb_ctrl_go_wd = reg_wdata[31];

  assign ddr2gb_ddr_addr0_we = addr_hit[9] & reg_we & ~wr_err;
  assign ddr2gb_ddr_addr0_wd = reg_wdata[31:0];

  assign ddr2gb_ddr_addr1_we = addr_hit[10] & reg_we & ~wr_err;
  assign ddr2gb_ddr_addr1_wd = reg_wdata[21:0];

  assign ddr2gb_gb_addr_addr_we = addr_hit[11] & reg_we & ~wr_err;
  assign ddr2gb_gb_addr_addr_wd = reg_wdata[10:0];

  assign ddr2gb_gb_addr_mux_we = addr_hit[11] & reg_we & ~wr_err;
  assign ddr2gb_gb_addr_mux_wd = reg_wdata[14:12];

  assign ddr2gb_gb_addr_idx_we = addr_hit[11] & reg_we & ~wr_err;
  assign ddr2gb_gb_addr_idx_wd = reg_wdata[21:16];

  assign ddr2gb_gb_addr_burst_len_we = addr_hit[11] & reg_we & ~wr_err;
  assign ddr2gb_gb_addr_burst_len_wd = reg_wdata[31:24];

  assign gb2lb_ctrl_mode_we = addr_hit[12] & reg_we & ~wr_err;
  assign gb2lb_ctrl_mode_wd = reg_wdata[0];

  assign gb2lb_ctrl_go_we = addr_hit[12] & reg_we & ~wr_err;
  assign gb2lb_ctrl_go_wd = reg_wdata[31];

  assign gb2lb_addr_src_addr_we = addr_hit[13] & reg_we & ~wr_err;
  assign gb2lb_addr_src_addr_wd = reg_wdata[10:0];

  assign gb2lb_addr_dest_addr_we = addr_hit[13] & reg_we & ~wr_err;
  assign gb2lb_addr_dest_addr_wd = reg_wdata[24:16];

  assign gb2lb_src0_skip_we = addr_hit[14] & reg_we & ~wr_err;
  assign gb2lb_src0_skip_wd = reg_wdata[10:0];

  assign gb2lb_src0_iter_we = addr_hit[14] & reg_we & ~wr_err;
  assign gb2lb_src0_iter_wd = reg_wdata[21:16];

  assign gb2lb_src1_len_we = addr_hit[15] & reg_we & ~wr_err;
  assign gb2lb_src1_len_wd = reg_wdata[10:0];

  assign gb2lb_src1_dila_we = addr_hit[15] & reg_we & ~wr_err;
  assign gb2lb_src1_dila_wd = reg_wdata[26:16];

  assign comp_ctrl_mode_comp_we = addr_hit[16] & reg_we & ~wr_err;
  assign comp_ctrl_mode_comp_wd = reg_wdata[1:0];

  assign comp_ctrl_mode_spar_we = addr_hit[16] & reg_we & ~wr_err;
  assign comp_ctrl_mode_spar_wd = reg_wdata[3:2];

  assign comp_ctrl_go_conv_we = addr_hit[16] & reg_we & ~wr_err;
  assign comp_ctrl_go_conv_wd = reg_wdata[30];

  assign comp_ctrl_go_fc_we = addr_hit[16] & reg_we & ~wr_err;
  assign comp_ctrl_go_fc_wd = reg_wdata[31];

  assign comp_k_size_k_size_we = addr_hit[17] & reg_we & ~wr_err;
  assign comp_k_size_k_size_wd = reg_wdata[3:0];

  assign comp_k_size_k_scale_we = addr_hit[17] & reg_we & ~wr_err;
  assign comp_k_size_k_scale_wd = reg_wdata[20:16];

  assign comp_f_size_if_len_we = addr_hit[18] & reg_we & ~wr_err;
  assign comp_f_size_if_len_wd = reg_wdata[7:0];

  assign comp_f_size_of_len_we = addr_hit[18] & reg_we & ~wr_err;
  assign comp_f_size_of_len_wd = reg_wdata[23:16];

  assign comp_c_size_if_chl_we = addr_hit[19] & reg_we & ~wr_err;
  assign comp_c_size_if_chl_wd = reg_wdata[7:0];

  assign comp_c_size_of_chl_we = addr_hit[19] & reg_we & ~wr_err;
  assign comp_c_size_of_chl_wd = reg_wdata[23:16];

  assign comp_p_size_pad_left_we = addr_hit[20] & reg_we & ~wr_err;
  assign comp_p_size_pad_left_wd = reg_wdata[7:0];

  assign comp_p_size_pad_right_we = addr_hit[20] & reg_we & ~wr_err;
  assign comp_p_size_pad_right_wd = reg_wdata[15:8];

  assign comp_p_size_pad_num_we = addr_hit[20] & reg_we & ~wr_err;
  assign comp_p_size_pad_num_wd = reg_wdata[31:16];

  assign comp_fbload_col_we = addr_hit[21] & reg_we & ~wr_err;
  assign comp_fbload_col_wd = reg_wdata[7:0];

  assign comp_fbload_row_we = addr_hit[21] & reg_we & ~wr_err;
  assign comp_fbload_row_wd = reg_wdata[15:8];

  assign comp_addr_lbuf_addr_we = addr_hit[22] & reg_we & ~wr_err;
  assign comp_addr_lbuf_addr_wd = reg_wdata[8:0];

  assign comp_addr_wbuf_addr_we = addr_hit[22] & reg_we & ~wr_err;
  assign comp_addr_wbuf_addr_wd = reg_wdata[21:12];

  assign comp_addr_ibuf_addr_we = addr_hit[22] & reg_we & ~wr_err;
  assign comp_addr_ibuf_addr_wd = reg_wdata[30:24];

  assign ppe_ctrl_ctrl_we = addr_hit[23] & reg_we & ~wr_err;
  assign ppe_ctrl_ctrl_wd = reg_wdata[1:0];

  assign ppe_ctrl_post_we = addr_hit[23] & reg_we & ~wr_err;
  assign ppe_ctrl_post_wd = reg_wdata[3:2];

  assign ppe_ctrl_mode_we = addr_hit[23] & reg_we & ~wr_err;
  assign ppe_ctrl_mode_wd = reg_wdata[4];

  assign ppe_ctrl_rst_we = addr_hit[23] & reg_we & ~wr_err;
  assign ppe_ctrl_rst_wd = reg_wdata[5];

  assign ppe_ctrl_act_we = addr_hit[23] & reg_we & ~wr_err;
  assign ppe_ctrl_act_wd = reg_wdata[16];

  assign ppe_ctrl_elem_we = addr_hit[23] & reg_we & ~wr_err;
  assign ppe_ctrl_elem_wd = reg_wdata[17];

  assign ppe_ctrl_bias_we = addr_hit[23] & reg_we & ~wr_err;
  assign ppe_ctrl_bias_wd = reg_wdata[19:18];

  assign ppe_ctrl_pass_we = addr_hit[23] & reg_we & ~wr_err;
  assign ppe_ctrl_pass_wd = reg_wdata[20];

  assign ppe_ctrl_oper_we = addr_hit[23] & reg_we & ~wr_err;
  assign ppe_ctrl_oper_wd = reg_wdata[22:21];

  assign ppe_ctrl_row_num_we = addr_hit[23] & reg_we & ~wr_err;
  assign ppe_ctrl_row_num_wd = reg_wdata[27:24];

  assign ppe_ctrl_go_we = addr_hit[23] & reg_we & ~wr_err;
  assign ppe_ctrl_go_wd = reg_wdata[31];

  assign ppe_fbuf_addr_fbuf_src_we = addr_hit[24] & reg_we & ~wr_err;
  assign ppe_fbuf_addr_fbuf_src_wd = reg_wdata[10:0];

  assign ppe_fbuf_addr_fbuf_dest_we = addr_hit[24] & reg_we & ~wr_err;
  assign ppe_fbuf_addr_fbuf_dest_wd = reg_wdata[26:16];

  assign ppe_abuf_addr_we = addr_hit[25] & reg_we & ~wr_err;
  assign ppe_abuf_addr_wd = reg_wdata[9:0];

  assign ppe_skip_src_skip_we = addr_hit[26] & reg_we & ~wr_err;
  assign ppe_skip_src_skip_wd = reg_wdata[10:0];

  assign ppe_skip_dest_skip_we = addr_hit[26] & reg_we & ~wr_err;
  assign ppe_skip_dest_skip_wd = reg_wdata[26:16];

  assign ppe_dila_src_dila_we = addr_hit[27] & reg_we & ~wr_err;
  assign ppe_dila_src_dila_wd = reg_wdata[10:0];

  assign ppe_dila_dest_dila_we = addr_hit[27] & reg_we & ~wr_err;
  assign ppe_dila_dest_dila_wd = reg_wdata[26:16];

  assign ppe_size_len_we = addr_hit[28] & reg_we & ~wr_err;
  assign ppe_size_len_wd = reg_wdata[5:0];

  assign ppe_size_iter_we = addr_hit[28] & reg_we & ~wr_err;
  assign ppe_size_iter_wd = reg_wdata[22:16];

  assign ppe_act_k0_act_k0_we = addr_hit[29] & reg_we & ~wr_err;
  assign ppe_act_k0_act_k0_wd = reg_wdata[15:0];

  assign ppe_act_k0_act_k1_we = addr_hit[29] & reg_we & ~wr_err;
  assign ppe_act_k0_act_k1_wd = reg_wdata[31:16];

  assign ppe_act_k1_act_k2_we = addr_hit[30] & reg_we & ~wr_err;
  assign ppe_act_k1_act_k2_wd = reg_wdata[15:0];

  assign ppe_act_k1_act_k3_we = addr_hit[30] & reg_we & ~wr_err;
  assign ppe_act_k1_act_k3_wd = reg_wdata[31:16];

  assign ppe_act_k2_act_k4_we = addr_hit[31] & reg_we & ~wr_err;
  assign ppe_act_k2_act_k4_wd = reg_wdata[15:0];

  assign ppe_act_k2_act_k5_we = addr_hit[31] & reg_we & ~wr_err;
  assign ppe_act_k2_act_k5_wd = reg_wdata[31:16];

  assign ppe_act_k3_act_k6_we = addr_hit[32] & reg_we & ~wr_err;
  assign ppe_act_k3_act_k6_wd = reg_wdata[15:0];

  assign ppe_act_k3_act_k7_we = addr_hit[32] & reg_we & ~wr_err;
  assign ppe_act_k3_act_k7_wd = reg_wdata[31:16];

  assign ppe_act_k4_act_k8_we = addr_hit[33] & reg_we & ~wr_err;
  assign ppe_act_k4_act_k8_wd = reg_wdata[15:0];

  assign ppe_act_k4_act_k9_we = addr_hit[33] & reg_we & ~wr_err;
  assign ppe_act_k4_act_k9_wd = reg_wdata[31:16];

  assign ppe_act_k5_act_k10_we = addr_hit[34] & reg_we & ~wr_err;
  assign ppe_act_k5_act_k10_wd = reg_wdata[15:0];

  assign ppe_act_k5_act_k11_we = addr_hit[34] & reg_we & ~wr_err;
  assign ppe_act_k5_act_k11_wd = reg_wdata[31:16];

  assign ppe_act_k6_act_k12_we = addr_hit[35] & reg_we & ~wr_err;
  assign ppe_act_k6_act_k12_wd = reg_wdata[15:0];

  assign ppe_act_k6_act_k13_we = addr_hit[35] & reg_we & ~wr_err;
  assign ppe_act_k6_act_k13_wd = reg_wdata[31:16];

  assign ppe_act_k7_act_k14_we = addr_hit[36] & reg_we & ~wr_err;
  assign ppe_act_k7_act_k14_wd = reg_wdata[15:0];

  assign ppe_act_k7_act_k15_we = addr_hit[36] & reg_we & ~wr_err;
  assign ppe_act_k7_act_k15_wd = reg_wdata[31:16];

  assign ppe_act_b0_act_b0_we = addr_hit[37] & reg_we & ~wr_err;
  assign ppe_act_b0_act_b0_wd = reg_wdata[15:0];

  assign ppe_act_b0_act_b1_we = addr_hit[37] & reg_we & ~wr_err;
  assign ppe_act_b0_act_b1_wd = reg_wdata[31:16];

  assign ppe_act_b1_act_b2_we = addr_hit[38] & reg_we & ~wr_err;
  assign ppe_act_b1_act_b2_wd = reg_wdata[15:0];

  assign ppe_act_b1_act_b3_we = addr_hit[38] & reg_we & ~wr_err;
  assign ppe_act_b1_act_b3_wd = reg_wdata[31:16];

  assign ppe_act_b2_act_b4_we = addr_hit[39] & reg_we & ~wr_err;
  assign ppe_act_b2_act_b4_wd = reg_wdata[15:0];

  assign ppe_act_b2_act_b5_we = addr_hit[39] & reg_we & ~wr_err;
  assign ppe_act_b2_act_b5_wd = reg_wdata[31:16];

  assign ppe_act_b3_act_b6_we = addr_hit[40] & reg_we & ~wr_err;
  assign ppe_act_b3_act_b6_wd = reg_wdata[15:0];

  assign ppe_act_b3_act_b7_we = addr_hit[40] & reg_we & ~wr_err;
  assign ppe_act_b3_act_b7_wd = reg_wdata[31:16];

  assign ppe_act_b4_act_b8_we = addr_hit[41] & reg_we & ~wr_err;
  assign ppe_act_b4_act_b8_wd = reg_wdata[15:0];

  assign ppe_act_b4_act_b9_we = addr_hit[41] & reg_we & ~wr_err;
  assign ppe_act_b4_act_b9_wd = reg_wdata[31:16];

  assign ppe_act_b5_act_b10_we = addr_hit[42] & reg_we & ~wr_err;
  assign ppe_act_b5_act_b10_wd = reg_wdata[15:0];

  assign ppe_act_b5_act_b11_we = addr_hit[42] & reg_we & ~wr_err;
  assign ppe_act_b5_act_b11_wd = reg_wdata[31:16];

  assign ppe_act_b6_act_b12_we = addr_hit[43] & reg_we & ~wr_err;
  assign ppe_act_b6_act_b12_wd = reg_wdata[15:0];

  assign ppe_act_b6_act_b13_we = addr_hit[43] & reg_we & ~wr_err;
  assign ppe_act_b6_act_b13_wd = reg_wdata[31:16];

  assign ppe_act_b7_act_b14_we = addr_hit[44] & reg_we & ~wr_err;
  assign ppe_act_b7_act_b14_wd = reg_wdata[15:0];

  assign ppe_act_b7_act_b15_we = addr_hit[44] & reg_we & ~wr_err;
  assign ppe_act_b7_act_b15_wd = reg_wdata[31:16];

  assign ppe_act_x0_act_x0_we = addr_hit[45] & reg_we & ~wr_err;
  assign ppe_act_x0_act_x0_wd = reg_wdata[15:0];

  assign ppe_act_x0_act_x1_we = addr_hit[45] & reg_we & ~wr_err;
  assign ppe_act_x0_act_x1_wd = reg_wdata[31:16];

  assign ppe_act_x1_act_x2_we = addr_hit[46] & reg_we & ~wr_err;
  assign ppe_act_x1_act_x2_wd = reg_wdata[15:0];

  assign ppe_act_x1_act_x3_we = addr_hit[46] & reg_we & ~wr_err;
  assign ppe_act_x1_act_x3_wd = reg_wdata[31:16];

  assign ppe_act_x2_act_x4_we = addr_hit[47] & reg_we & ~wr_err;
  assign ppe_act_x2_act_x4_wd = reg_wdata[15:0];

  assign ppe_act_x2_act_x5_we = addr_hit[47] & reg_we & ~wr_err;
  assign ppe_act_x2_act_x5_wd = reg_wdata[31:16];

  assign ppe_act_x3_act_x6_we = addr_hit[48] & reg_we & ~wr_err;
  assign ppe_act_x3_act_x6_wd = reg_wdata[15:0];

  assign ppe_act_x3_act_x7_we = addr_hit[48] & reg_we & ~wr_err;
  assign ppe_act_x3_act_x7_wd = reg_wdata[31:16];

  assign ppe_act_x4_act_x8_we = addr_hit[49] & reg_we & ~wr_err;
  assign ppe_act_x4_act_x8_wd = reg_wdata[15:0];

  assign ppe_act_x4_act_x9_we = addr_hit[49] & reg_we & ~wr_err;
  assign ppe_act_x4_act_x9_wd = reg_wdata[31:16];

  assign ppe_act_x5_act_x10_we = addr_hit[50] & reg_we & ~wr_err;
  assign ppe_act_x5_act_x10_wd = reg_wdata[15:0];

  assign ppe_act_x5_act_x11_we = addr_hit[50] & reg_we & ~wr_err;
  assign ppe_act_x5_act_x11_wd = reg_wdata[31:16];

  assign ppe_act_x6_act_x12_we = addr_hit[51] & reg_we & ~wr_err;
  assign ppe_act_x6_act_x12_wd = reg_wdata[15:0];

  assign ppe_act_x6_act_x13_we = addr_hit[51] & reg_we & ~wr_err;
  assign ppe_act_x6_act_x13_wd = reg_wdata[31:16];

  assign ppe_act_x7_we = addr_hit[52] & reg_we & ~wr_err;
  assign ppe_act_x7_wd = reg_wdata[15:0];


  assign ddr_mosi_u_we = addr_hit[54] & reg_we & ~wr_err;
  assign ddr_mosi_u_wd = reg_wdata[31:0];

  assign ddr_mosi_l_we = addr_hit[55] & reg_we & ~wr_err;
  assign ddr_mosi_l_wd = reg_wdata[31:0];

  assign ddr_mosi_valid_we = addr_hit[56] & reg_we & ~wr_err;
  assign ddr_mosi_valid_wd = reg_wdata[0];

  assign ddr_miso_valid_we = addr_hit[57] & reg_we & ~wr_err;
  assign ddr_miso_valid_wd = reg_wdata[0];

  assign rxf_ctrl_wptr_we = addr_hit[58] & reg_we & ~wr_err;
  assign rxf_ctrl_wptr_wd = reg_wdata[15:0];

  assign rxf_ctrl_rptr_we = addr_hit[58] & reg_we & ~wr_err;
  assign rxf_ctrl_rptr_wd = reg_wdata[31:16];

  assign cpu_rd_we = addr_hit[59] & reg_we & ~wr_err;
  assign cpu_rd_wd = reg_wdata[0];

  assign cpu_access_ddr_we = addr_hit[60] & reg_we & ~wr_err;
  assign cpu_access_ddr_wd = reg_wdata[0];

  // Read data return
  always_comb begin
    reg_rdata_next = '0;
    unique case (1'b1)
      addr_hit[0]: begin
        reg_rdata_next[0] = intr_state_qs;
      end

      addr_hit[1]: begin
        reg_rdata_next[0] = intr_enable_qs;
      end

      addr_hit[2]: begin
        reg_rdata_next[0] = '0;
      end

      addr_hit[3]: begin
        reg_rdata_next[0] = gst_status_ddr2gb_qs;
        reg_rdata_next[1] = gst_status_gb2lb_qs;
        reg_rdata_next[2] = gst_status_conv_qs;
        reg_rdata_next[3] = gst_status_fc_qs;
        reg_rdata_next[4] = gst_status_ppe_qs;
      end

      addr_hit[4]: begin
        reg_rdata_next[0] = gst_intr_ddr2gb_qs;
        reg_rdata_next[1] = gst_intr_gb2lb_qs;
        reg_rdata_next[2] = gst_intr_conv_qs;
        reg_rdata_next[3] = gst_intr_fc_qs;
        reg_rdata_next[4] = gst_intr_ppe_qs;
      end

      addr_hit[5]: begin
        reg_rdata_next[15:0] = gst_enable_row_qs;
      end

      addr_hit[6]: begin
        reg_rdata_next[15:0] = gst_enable_col_qs;
      end

      addr_hit[7]: begin
        reg_rdata_next[0] = gst_comp_state_comp_qs;
        reg_rdata_next[1] = gst_comp_state_ppe_qs;
      end

      addr_hit[8]: begin
        reg_rdata_next[0] = ddr2gb_ctrl_direction_qs;
        reg_rdata_next[31] = ddr2gb_ctrl_go_qs;
      end

      addr_hit[9]: begin
        reg_rdata_next[31:0] = ddr2gb_ddr_addr0_qs;
      end

      addr_hit[10]: begin
        reg_rdata_next[21:0] = ddr2gb_ddr_addr1_qs;
      end

      addr_hit[11]: begin
        reg_rdata_next[10:0] = ddr2gb_gb_addr_addr_qs;
        reg_rdata_next[14:12] = ddr2gb_gb_addr_mux_qs;
        reg_rdata_next[21:16] = ddr2gb_gb_addr_idx_qs;
        reg_rdata_next[31:24] = ddr2gb_gb_addr_burst_len_qs;
      end

      addr_hit[12]: begin
        reg_rdata_next[0] = gb2lb_ctrl_mode_qs;
        reg_rdata_next[31] = gb2lb_ctrl_go_qs;
      end

      addr_hit[13]: begin
        reg_rdata_next[10:0] = gb2lb_addr_src_addr_qs;
        reg_rdata_next[24:16] = gb2lb_addr_dest_addr_qs;
      end

      addr_hit[14]: begin
        reg_rdata_next[10:0] = gb2lb_src0_skip_qs;
        reg_rdata_next[21:16] = gb2lb_src0_iter_qs;
      end

      addr_hit[15]: begin
        reg_rdata_next[10:0] = gb2lb_src1_len_qs;
        reg_rdata_next[26:16] = gb2lb_src1_dila_qs;
      end

      addr_hit[16]: begin
        reg_rdata_next[1:0] = comp_ctrl_mode_comp_qs;
        reg_rdata_next[3:2] = comp_ctrl_mode_spar_qs;
        reg_rdata_next[30] = comp_ctrl_go_conv_qs;
        reg_rdata_next[31] = comp_ctrl_go_fc_qs;
      end

      addr_hit[17]: begin
        reg_rdata_next[3:0] = comp_k_size_k_size_qs;
        reg_rdata_next[20:16] = comp_k_size_k_scale_qs;
      end

      addr_hit[18]: begin
        reg_rdata_next[7:0] = comp_f_size_if_len_qs;
        reg_rdata_next[23:16] = comp_f_size_of_len_qs;
      end

      addr_hit[19]: begin
        reg_rdata_next[7:0] = comp_c_size_if_chl_qs;
        reg_rdata_next[23:16] = comp_c_size_of_chl_qs;
      end

      addr_hit[20]: begin
        reg_rdata_next[7:0] = comp_p_size_pad_left_qs;
        reg_rdata_next[15:8] = comp_p_size_pad_right_qs;
        reg_rdata_next[31:16] = comp_p_size_pad_num_qs;
      end

      addr_hit[21]: begin
        reg_rdata_next[7:0] = comp_fbload_col_qs;
        reg_rdata_next[15:8] = comp_fbload_row_qs;
      end

      addr_hit[22]: begin
        reg_rdata_next[8:0] = comp_addr_lbuf_addr_qs;
        reg_rdata_next[21:12] = comp_addr_wbuf_addr_qs;
        reg_rdata_next[30:24] = comp_addr_ibuf_addr_qs;
      end

      addr_hit[23]: begin
        reg_rdata_next[1:0] = ppe_ctrl_ctrl_qs;
        reg_rdata_next[3:2] = ppe_ctrl_post_qs;
        reg_rdata_next[4] = ppe_ctrl_mode_qs;
        reg_rdata_next[5] = ppe_ctrl_rst_qs;
        reg_rdata_next[16] = ppe_ctrl_act_qs;
        reg_rdata_next[17] = ppe_ctrl_elem_qs;
        reg_rdata_next[19:18] = ppe_ctrl_bias_qs;
        reg_rdata_next[20] = ppe_ctrl_pass_qs;
        reg_rdata_next[22:21] = ppe_ctrl_oper_qs;
        reg_rdata_next[27:24] = ppe_ctrl_row_num_qs;
        reg_rdata_next[31] = ppe_ctrl_go_qs;
      end

      addr_hit[24]: begin
        reg_rdata_next[10:0] = ppe_fbuf_addr_fbuf_src_qs;
        reg_rdata_next[26:16] = ppe_fbuf_addr_fbuf_dest_qs;
      end

      addr_hit[25]: begin
        reg_rdata_next[9:0] = ppe_abuf_addr_qs;
      end

      addr_hit[26]: begin
        reg_rdata_next[10:0] = ppe_skip_src_skip_qs;
        reg_rdata_next[26:16] = ppe_skip_dest_skip_qs;
      end

      addr_hit[27]: begin
        reg_rdata_next[10:0] = ppe_dila_src_dila_qs;
        reg_rdata_next[26:16] = ppe_dila_dest_dila_qs;
      end

      addr_hit[28]: begin
        reg_rdata_next[5:0] = ppe_size_len_qs;
        reg_rdata_next[22:16] = ppe_size_iter_qs;
      end

      addr_hit[29]: begin
        reg_rdata_next[15:0] = ppe_act_k0_act_k0_qs;
        reg_rdata_next[31:16] = ppe_act_k0_act_k1_qs;
      end

      addr_hit[30]: begin
        reg_rdata_next[15:0] = ppe_act_k1_act_k2_qs;
        reg_rdata_next[31:16] = ppe_act_k1_act_k3_qs;
      end

      addr_hit[31]: begin
        reg_rdata_next[15:0] = ppe_act_k2_act_k4_qs;
        reg_rdata_next[31:16] = ppe_act_k2_act_k5_qs;
      end

      addr_hit[32]: begin
        reg_rdata_next[15:0] = ppe_act_k3_act_k6_qs;
        reg_rdata_next[31:16] = ppe_act_k3_act_k7_qs;
      end

      addr_hit[33]: begin
        reg_rdata_next[15:0] = ppe_act_k4_act_k8_qs;
        reg_rdata_next[31:16] = ppe_act_k4_act_k9_qs;
      end

      addr_hit[34]: begin
        reg_rdata_next[15:0] = ppe_act_k5_act_k10_qs;
        reg_rdata_next[31:16] = ppe_act_k5_act_k11_qs;
      end

      addr_hit[35]: begin
        reg_rdata_next[15:0] = ppe_act_k6_act_k12_qs;
        reg_rdata_next[31:16] = ppe_act_k6_act_k13_qs;
      end

      addr_hit[36]: begin
        reg_rdata_next[15:0] = ppe_act_k7_act_k14_qs;
        reg_rdata_next[31:16] = ppe_act_k7_act_k15_qs;
      end

      addr_hit[37]: begin
        reg_rdata_next[15:0] = ppe_act_b0_act_b0_qs;
        reg_rdata_next[31:16] = ppe_act_b0_act_b1_qs;
      end

      addr_hit[38]: begin
        reg_rdata_next[15:0] = ppe_act_b1_act_b2_qs;
        reg_rdata_next[31:16] = ppe_act_b1_act_b3_qs;
      end

      addr_hit[39]: begin
        reg_rdata_next[15:0] = ppe_act_b2_act_b4_qs;
        reg_rdata_next[31:16] = ppe_act_b2_act_b5_qs;
      end

      addr_hit[40]: begin
        reg_rdata_next[15:0] = ppe_act_b3_act_b6_qs;
        reg_rdata_next[31:16] = ppe_act_b3_act_b7_qs;
      end

      addr_hit[41]: begin
        reg_rdata_next[15:0] = ppe_act_b4_act_b8_qs;
        reg_rdata_next[31:16] = ppe_act_b4_act_b9_qs;
      end

      addr_hit[42]: begin
        reg_rdata_next[15:0] = ppe_act_b5_act_b10_qs;
        reg_rdata_next[31:16] = ppe_act_b5_act_b11_qs;
      end

      addr_hit[43]: begin
        reg_rdata_next[15:0] = ppe_act_b6_act_b12_qs;
        reg_rdata_next[31:16] = ppe_act_b6_act_b13_qs;
      end

      addr_hit[44]: begin
        reg_rdata_next[15:0] = ppe_act_b7_act_b14_qs;
        reg_rdata_next[31:16] = ppe_act_b7_act_b15_qs;
      end

      addr_hit[45]: begin
        reg_rdata_next[15:0] = ppe_act_x0_act_x0_qs;
        reg_rdata_next[31:16] = ppe_act_x0_act_x1_qs;
      end

      addr_hit[46]: begin
        reg_rdata_next[15:0] = ppe_act_x1_act_x2_qs;
        reg_rdata_next[31:16] = ppe_act_x1_act_x3_qs;
      end

      addr_hit[47]: begin
        reg_rdata_next[15:0] = ppe_act_x2_act_x4_qs;
        reg_rdata_next[31:16] = ppe_act_x2_act_x5_qs;
      end

      addr_hit[48]: begin
        reg_rdata_next[15:0] = ppe_act_x3_act_x6_qs;
        reg_rdata_next[31:16] = ppe_act_x3_act_x7_qs;
      end

      addr_hit[49]: begin
        reg_rdata_next[15:0] = ppe_act_x4_act_x8_qs;
        reg_rdata_next[31:16] = ppe_act_x4_act_x9_qs;
      end

      addr_hit[50]: begin
        reg_rdata_next[15:0] = ppe_act_x5_act_x10_qs;
        reg_rdata_next[31:16] = ppe_act_x5_act_x11_qs;
      end

      addr_hit[51]: begin
        reg_rdata_next[15:0] = ppe_act_x6_act_x12_qs;
        reg_rdata_next[31:16] = ppe_act_x6_act_x13_qs;
      end

      addr_hit[52]: begin
        reg_rdata_next[15:0] = ppe_act_x7_qs;
      end

      addr_hit[53]: begin
        reg_rdata_next[0] = init_calib_complete_qs;
      end

      addr_hit[54]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[55]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[56]: begin
        reg_rdata_next[0] = '0;
      end

      addr_hit[57]: begin
        reg_rdata_next[0] = ddr_miso_valid_qs;
      end

      addr_hit[58]: begin
        reg_rdata_next[15:0] = rxf_ctrl_wptr_qs;
        reg_rdata_next[31:16] = rxf_ctrl_rptr_qs;
      end

      addr_hit[59]: begin
        reg_rdata_next[0] = cpu_rd_qs;
      end

      addr_hit[60]: begin
        reg_rdata_next[0] = cpu_access_ddr_qs;
      end

      default: begin
        reg_rdata_next = '1;
      end
    endcase
  end

  // Assertions for Register Interface
  `ASSERT_PULSE(wePulse, reg_we)
  `ASSERT_PULSE(rePulse, reg_re)

  `ASSERT(reAfterRv, $rose(reg_re || reg_we) |=> tl_o.d_valid)

  `ASSERT(en2addrHit, (reg_we || reg_re) |-> $onehot0(addr_hit))

  // this is formulated as an assumption such that the FPV testbenches do disprove this
  // property by mistake
  `ASSUME(reqParity, tl_reg_h2d.a_valid |-> tl_reg_h2d.a_user.parity_en == 1'b0)

endmodule
