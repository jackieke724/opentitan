// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Package auto-generated by `reggen` containing data structure

package vec_dot_reg_pkg;

  // Param list
  parameter int VEC_LEN = 4;

  ////////////////////////////
  // Typedefs for registers //
  ////////////////////////////
  typedef struct packed {
    logic        q;
  } vec_dot_reg2hw_intr_state_reg_t;

  typedef struct packed {
    logic        q;
  } vec_dot_reg2hw_intr_enable_reg_t;

  typedef struct packed {
    logic        q;
    logic        qe;
  } vec_dot_reg2hw_intr_test_reg_t;

  typedef struct packed {
    struct packed {
      logic        q;
      logic        qe;
    } start;
    struct packed {
      logic        q;
      logic        qe;
    } dummy;
  } vec_dot_reg2hw_cmd_reg_t;

  typedef struct packed {
    logic [31:0] q;
    logic        qe;
  } vec_dot_reg2hw_wdata_reg_t;


  typedef struct packed {
    logic        d;
    logic        de;
  } vec_dot_hw2reg_intr_state_reg_t;

  typedef struct packed {
    struct packed {
      logic        d;
    } busy;
    struct packed {
      logic        d;
    } dummy;
  } vec_dot_hw2reg_status_reg_t;

  typedef struct packed {
    logic [31:0] d;
  } vec_dot_hw2reg_dotp_result_reg_t;


  ///////////////////////////////////////
  // Register to internal design logic //
  ///////////////////////////////////////
  typedef struct packed {
    vec_dot_reg2hw_intr_state_reg_t intr_state; // [40:40]
    vec_dot_reg2hw_intr_enable_reg_t intr_enable; // [39:39]
    vec_dot_reg2hw_intr_test_reg_t intr_test; // [38:37]
    vec_dot_reg2hw_cmd_reg_t cmd; // [36:33]
    vec_dot_reg2hw_wdata_reg_t wdata; // [32:0]
  } vec_dot_reg2hw_t;

  ///////////////////////////////////////
  // Internal design logic to register //
  ///////////////////////////////////////
  typedef struct packed {
    vec_dot_hw2reg_intr_state_reg_t intr_state; // [35:34]
    vec_dot_hw2reg_status_reg_t status; // [33:32]
    vec_dot_hw2reg_dotp_result_reg_t dotp_result; // [31:0]
  } vec_dot_hw2reg_t;

  // Register Address
  parameter logic [4:0] VEC_DOT_INTR_STATE_OFFSET = 5'h 0;
  parameter logic [4:0] VEC_DOT_INTR_ENABLE_OFFSET = 5'h 4;
  parameter logic [4:0] VEC_DOT_INTR_TEST_OFFSET = 5'h 8;
  parameter logic [4:0] VEC_DOT_CMD_OFFSET = 5'h c;
  parameter logic [4:0] VEC_DOT_STATUS_OFFSET = 5'h 10;
  parameter logic [4:0] VEC_DOT_DOTP_RESULT_OFFSET = 5'h 14;
  parameter logic [4:0] VEC_DOT_WDATA_OFFSET = 5'h 18;


  // Register Index
  typedef enum int {
    VEC_DOT_INTR_STATE,
    VEC_DOT_INTR_ENABLE,
    VEC_DOT_INTR_TEST,
    VEC_DOT_CMD,
    VEC_DOT_STATUS,
    VEC_DOT_DOTP_RESULT,
    VEC_DOT_WDATA
  } vec_dot_id_e;

  // Register width information to check illegal writes
  parameter logic [3:0] VEC_DOT_PERMIT [7] = '{
    4'b 0001, // index[0] VEC_DOT_INTR_STATE
    4'b 0001, // index[1] VEC_DOT_INTR_ENABLE
    4'b 0001, // index[2] VEC_DOT_INTR_TEST
    4'b 0001, // index[3] VEC_DOT_CMD
    4'b 0001, // index[4] VEC_DOT_STATUS
    4'b 1111, // index[5] VEC_DOT_DOTP_RESULT
    4'b 1111  // index[6] VEC_DOT_WDATA
  };
endpackage

